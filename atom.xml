<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>leesea</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-22T01:51:43.925Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>leesea</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python-future</title>
    <link href="http://yoursite.com/2019/08/22/python-future/"/>
    <id>http://yoursite.com/2019/08/22/python-future/</id>
    <published>2019-08-22T01:50:52.000Z</published>
    <updated>2019-08-22T01:51:43.925Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> as_completed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(i)</span>:</span></span><br><span class="line">  <span class="comment"># do something</span></span><br><span class="line">  time.sleep(random.randint(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="comment"># max_workers 指定线程池大小，如果不指定默认是 cpu *5</span></span><br><span class="line">p = ThreadPoolExecutor(max_workers=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交任务</span></span><br><span class="line">tasks = [p.submit(foo, i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取返回结果, 这里的返回并不是按照提交顺序来的，而是谁先完成，谁先返回</span></span><br><span class="line"><span class="keyword">for</span> future <span class="keyword">in</span> as_completed(tasks):</span><br><span class="line">  print(future.result())</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 如果希望有序返回，使用 map</span></span><br><span class="line"><span class="comment"># 这里 result 是生成器，可以使用 list(result) 转换为 list 类型</span></span><br><span class="line">result = p.map(foo, range(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>单机性能分析</title>
    <link href="http://yoursite.com/2019/08/22/io/"/>
    <id>http://yoursite.com/2019/08/22/io/</id>
    <published>2019-08-22T01:34:04.000Z</published>
    <updated>2019-08-22T01:43:16.515Z</updated>
    
    <content type="html"><![CDATA[<p>给你一台服务器或者虚拟机，怎么充分发挥性能呢？</p><a id="more"></a><h1 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h1><p>如果是计算密集形的任务，主要瓶颈可能在CPU, 可以通过 top 命令查看 cpu的使用率。</p><h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><p>内存不光涉及使用率，还有换页等。</p><h1 id="硬盘I-O"><a href="#硬盘I-O" class="headerlink" title="硬盘I/O"></a>硬盘I/O</h1><h2 id="iostat"><a href="#iostat" class="headerlink" title="iostat"></a>iostat</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yum install sysstat -y</span><br><span class="line"></span><br><span class="line">iostat</span><br><span class="line">Linux 3.10.0-514.26.2.el7.v7.4.x86_64 (centos) 08/22/2019 _x86_64_(4 CPU)</span><br><span class="line"></span><br><span class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">           2.61    0.00    0.45    0.00    0.00   96.94</span><br><span class="line"></span><br><span class="line">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class="line">sda               0.52         0.12      1727.75     515932 7572051863</span><br></pre></td></tr></table></figure><h1 id="网络I-O"><a href="#网络I-O" class="headerlink" title="网络I/O"></a>网络I/O</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给你一台服务器或者虚拟机，怎么充分发挥性能呢？&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>go 操作 ElasticSearch</title>
    <link href="http://yoursite.com/2019/08/21/go-es/"/>
    <id>http://yoursite.com/2019/08/21/go-es/</id>
    <published>2019-08-21T03:22:01.000Z</published>
    <updated>2019-08-21T03:28:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>go 操作ES并不像 python 那么直观，需要使用很多的 struct 和 函数，感觉没有 python 的 dict 好用。本文以<code>v5</code>版本为例说明。</p><a id="more"></a><h2 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"gopkg.in/olivere/elastic.v5"</span></span><br><span class="line"></span><br><span class="line">client, err := elastic.NewClient(elastic.SetURL(<span class="string">"http://192.168.1.100:9296"</span>))</span><br></pre></td></tr></table></figure><h2 id="查看dsl-语句"><a href="#查看dsl-语句" class="headerlink" title="查看dsl 语句"></a>查看dsl 语句</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"gopkg.in/olivere/elastic.v5"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">query := elastic.NewBoolQuery()</span><br><span class="line">query = query.Must(elastic.NewTermQuery(<span class="string">"user"</span>, <span class="string">"olivere"</span>))</span><br><span class="line">query = query.Filter(elastic.NewTermQuery(<span class="string">"account"</span>, <span class="number">1</span>))</span><br><span class="line">src, err := query.Source()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data, err := json.MarshalIndent(src, <span class="string">""</span>, <span class="string">"  "</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"> <span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(data))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   "bool": &#123;</span></span><br><span class="line"><span class="comment">//     "filter": &#123;</span></span><br><span class="line"><span class="comment">//       "term": &#123;</span></span><br><span class="line"><span class="comment">//         "account": 1</span></span><br><span class="line"><span class="comment">//       &#125;</span></span><br><span class="line"><span class="comment">//     &#125;,</span></span><br><span class="line"><span class="comment">//     "must": &#123;</span></span><br><span class="line"><span class="comment">//       "term": &#123;</span></span><br><span class="line"><span class="comment">//         "user": "olivere"</span></span><br><span class="line"><span class="comment">//       &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;go 操作ES并不像 python 那么直观，需要使用很多的 struct 和 函数，感觉没有 python 的 dict 好用。本文以&lt;code&gt;v5&lt;/code&gt;版本为例说明。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>kafka 常用命令</title>
    <link href="http://yoursite.com/2019/08/19/kafka/"/>
    <id>http://yoursite.com/2019/08/19/kafka/</id>
    <published>2019-08-19T10:42:48.000Z</published>
    <updated>2019-08-20T08:10:37.563Z</updated>
    
    <content type="html"><![CDATA[<p>kafka 常用命令。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列出所有 consumer group</span></span><br><span class="line">./kafka-consumer-groups.sh --bootstrap-server localhost:9092 --list</span><br><span class="line"></span><br><span class="line"><span class="comment">#某个 consumer group 信息</span></span><br><span class="line">./kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group group_id_qa</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将某个 group 的 topic 重置到 earliest</span></span><br><span class="line">./kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group group_id_qa --topic t_frame_set_qa --execute --reset-offsets --to-earliest</span><br><span class="line"></span><br><span class="line"><span class="comment">#列出所有 topic</span></span><br><span class="line">./kafka-topics.sh --zookeeper 192.168.1.100:2181/kafka --list</span><br><span class="line"></span><br><span class="line"><span class="comment">#某个 topic 信息</span></span><br><span class="line">./kafka-topics.sh --zookeeper 192.168.1.100:2181/kafka --describe --topic t_my_topic</span><br><span class="line"></span><br><span class="line"><span class="comment">#console 消费</span></span><br><span class="line">./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic t_my_topic --max-messages 1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;kafka 常用命令。&lt;/p&gt;
    
    </summary>
    
    
      <category term="kafka" scheme="http://yoursite.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>谈谈几款 kv 数据库</title>
    <link href="http://yoursite.com/2019/08/15/kv/"/>
    <id>http://yoursite.com/2019/08/15/kv/</id>
    <published>2019-08-15T03:44:53.000Z</published>
    <updated>2019-08-19T10:42:17.816Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><h2 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h2><p>etcd 虽然也是kv存储，但是更多的是用来做服务发现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;redis&quot;&gt;&lt;a href=&quot;#redis&quot; class=&quot;headerlink&quot; title=&quot;redis&quot;&gt;&lt;/a&gt;redis&lt;/h2&gt;&lt;h2 id=&quot;etcd&quot;&gt;&lt;a href=&quot;#etcd&quot; class=&quot;headerlink&quot; title=&quot;etcd&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>alpine</title>
    <link href="http://yoursite.com/2019/07/25/alpine/"/>
    <id>http://yoursite.com/2019/07/25/alpine/</id>
    <published>2019-07-25T03:41:22.000Z</published>
    <updated>2019-08-06T11:24:22.603Z</updated>
    
    <content type="html"><![CDATA[<p>alpine 是一个很小的linux 镜像，只有十几M大小，很适合部分服务。不过 alpine 的 c 库不是 glibc，所以依赖 glibc 时会有一些问题。</p><a id="more"></a><h2 id="定制时区"><a href="#定制时区" class="headerlink" title="定制时区"></a>定制时区</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apk add tzdata --no-cache</span><br><span class="line">ls /usr/share/zoneinfo</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Europe/Brussels"</span> &gt;  /etc/timezone</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者通过环境变量方式设置</span></span><br><span class="line">ENV TZ Asia/Shanghai</span><br></pre></td></tr></table></figure><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p>alpine 的 gcc 不是标准的 glibc, 使用 mysql 时有点问题，需要用下面的sed 命令修改下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apk add --no-cache mariadb-dev gcc musl-dev</span><br><span class="line">sed <span class="string">'/st_mysql_options options;/a unsigned int reconnect;'</span> /usr/include/mysql/mysql.h -i.bkp</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;alpine 是一个很小的linux 镜像，只有十几M大小，很适合部分服务。不过 alpine 的 c 库不是 glibc，所以依赖 glibc 时会有一些问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>mysql 笔记</title>
    <link href="http://yoursite.com/2019/07/25/mysql/"/>
    <id>http://yoursite.com/2019/07/25/mysql/</id>
    <published>2019-07-25T02:33:59.000Z</published>
    <updated>2019-07-25T02:48:52.022Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="host-授权"><a href="#host-授权" class="headerlink" title="host 授权"></a>host 授权</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通配符设置网段</span></span><br><span class="line"><span class="keyword">grant</span> all <span class="keyword">privileges</span> <span class="keyword">on</span> &lt;db_name&gt;.* <span class="keyword">to</span> root@<span class="string">'10.249.149.%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'&lt;pwd&gt;'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>；</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;host-授权&quot;&gt;&lt;a href=&quot;#host-授权&quot; class=&quot;headerlink&quot; title=&quot;host 授权&quot;&gt;&lt;/a&gt;host 授权&lt;/h2&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="database" scheme="http://yoursite.com/categories/database/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>vagrant 使用</title>
    <link href="http://yoursite.com/2019/07/24/vagrant/"/>
    <id>http://yoursite.com/2019/07/24/vagrant/</id>
    <published>2019-07-24T06:33:09.000Z</published>
    <updated>2019-07-24T09:45:36.595Z</updated>
    
    <content type="html"><![CDATA[<p>Vagrant 是一款虚拟机管理工具，支持hyper, libvirt, virtual box, VMware_desktop, 可以和IDE 集成。使用vagrant的好处是可以在windows或者macos下编写代码，在linux下运行。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="noopener">https://www.vagrantup.com/downloads.html</a> 下载对应安装包安装即可。</p><h2 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h2><p>Vagrant 可以使用命令安装虚拟机，不过网络容易断，建议先下载镜像，再离线安装。</p><h3 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h3><p>虚拟机类型根据自己需求选择，这里选择的是 virtualbox</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add centos/7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This box can work with multiple providers! The providers that it</span><br><span class="line">can work with are listed below. Please review the list and choose</span><br><span class="line">the provider you will be working with.</span><br><span class="line"></span><br><span class="line">1) hyperv</span><br><span class="line">2) libvirt</span><br><span class="line">3) virtualbox</span><br><span class="line">4) vmware_desktop</span><br><span class="line"></span><br><span class="line">Enter your choice: 3</span><br></pre></td></tr></table></figure><h3 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h3><p>vagrant 网站提供了一些镜像下载，地址如下： <a href="https://app.vagrantup.com/boxes/search" target="_blank" rel="noopener">https://app.vagrantup.com/boxes/search</a>, 这里以centos7为例：</p><ol><li>下载镜像 centos7 的镜像；</li><li><code>vagrant box add —name &#39;centos/7&#39; [box_path]</code></li></ol><h2 id="虚拟机操作"><a href="#虚拟机操作" class="headerlink" title="虚拟机操作"></a>虚拟机操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成虚拟机配置文件</span></span><br><span class="line">vagrant init centos/7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动虚拟机</span></span><br><span class="line">vagrant up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录虚拟机(默认账号密码都是vagrant, 可以 su 到 root)</span></span><br><span class="line">vagrant ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭虚拟机</span></span><br><span class="line">vagrant halt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 销毁虚拟机</span></span><br><span class="line">vagrant destroy</span><br></pre></td></tr></table></figure><h2 id="pycharm-集成"><a href="#pycharm-集成" class="headerlink" title="pycharm 集成"></a>pycharm 集成</h2><p>Vagrant 只支持pycharm 专业版，不需要单独安装插件。</p><h2 id="vagrant-配置说明"><a href="#vagrant-配置说明" class="headerlink" title="vagrant 配置说明"></a>vagrant 配置说明</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置同步目录</span></span><br><span class="line">config.vm.synced_folder <span class="string">"./"</span>, <span class="string">"/vagrant_data/my_project"</span>, create: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置网络</span></span><br><span class="line">config.vm.network <span class="string">"private_network"</span>, ip: <span class="string">"192.168.33.10"</span></span><br></pre></td></tr></table></figure><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><ol><li><p>vboxsf  mount 问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vagrant plugin install vagrant-vbguest</span><br><span class="line">vagrant destroy &amp;&amp; vagrant up</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vagrant 是一款虚拟机管理工具，支持hyper, libvirt, virtual box, VMware_desktop, 可以和IDE 集成。使用vagrant的好处是可以在windows或者macos下编写代码，在linux下运行。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python 时间日期</title>
    <link href="http://yoursite.com/2019/07/23/python-date/"/>
    <id>http://yoursite.com/2019/07/23/python-date/</id>
    <published>2019-07-23T02:01:52.000Z</published>
    <updated>2019-08-12T03:09:59.677Z</updated>
    
    <content type="html"><![CDATA[<p>时间和日期常常会在编程中使用。</p><a id="more"></a><h2 id="字符串和日期转换"><a href="#字符串和日期转换" class="headerlink" title="字符串和日期转换"></a>字符串和日期转换</h2><ul><li><code>strptime</code> = “string parse time”</li><li><code>strftime</code> = “string format time”</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># str 转 datetime</span></span><br><span class="line">datetime_obj = datetime.strptime(<span class="string">'Jun 1 2005  1:33PM'</span>, <span class="string">'%b %d %Y %I:%M%p'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime 转 str</span></span><br><span class="line">date_str = datetime.strftime(datetime_obj, <span class="string">'%b %d %Y %I:%M%p'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># date 转 str</span></span><br><span class="line">today = datetime.date.today()</span><br><span class="line">today_str = today.strftime(<span class="string">'%Y-%m-%d'</span>)</span><br></pre></td></tr></table></figure><h2 id="datetime-转-date"><a href="#datetime-转-date" class="headerlink" title="datetime 转 date"></a>datetime 转 date</h2><p>使用 <code>date</code> 函数转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">date_str = <span class="string">'2019.01.22'</span></span><br><span class="line">index_date = datetime.strptime(date_str, <span class="string">"%Y.%m.%d"</span>).date()</span><br></pre></td></tr></table></figure><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前日期</span></span><br><span class="line">today = datetime.date.today()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 昨天</span></span><br><span class="line">yesterday = today + datetime.timedelta(<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 明天</span></span><br><span class="line">tomorrow = today + datetime.timedelta(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="日期比较"><a href="#日期比较" class="headerlink" title="日期比较"></a>日期比较</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># date 类型比较</span></span><br><span class="line">days = (today - tomorrow).days</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime 类型比较</span></span><br><span class="line">datetime1 &gt; datetime2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间和日期常常会在编程中使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch 笔记</title>
    <link href="http://yoursite.com/2019/07/16/elasticsearch/"/>
    <id>http://yoursite.com/2019/07/16/elasticsearch/</id>
    <published>2019-07-16T02:17:28.000Z</published>
    <updated>2019-09-16T07:17:28.070Z</updated>
    
    <content type="html"><![CDATA[<p>记录下ES的常用操作，方便查看。</p><a id="more"></a><h2 id="painless"><a href="#painless" class="headerlink" title="painless"></a>painless</h2><p>ES 使用的是 <code>painless</code> 语言。</p><h2 id="更新数组"><a href="#更新数组" class="headerlink" title="更新数组"></a>更新数组</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h2><p><strong>删除单个索引</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /index_name</span><br></pre></td></tr></table></figure><p><strong>删除所有索引</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 两张选其一即可</span><br><span class="line">DELETE /_all</span><br><span class="line">DELETE /*</span><br></pre></td></tr></table></figure><p><strong>索引复制</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /_reindex?wait_for_completion=false</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;source&quot;: &#123;</span><br><span class="line">    &quot;index&quot;: &quot;source_index&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dest&quot;: &#123;</span><br><span class="line">    &quot;index&quot;: &quot;target_index&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h2><p><strong>删除单个文档</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /index/_doc/id</span><br></pre></td></tr></table></figure><p><strong>文档重建</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /index/type/id</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;ip&quot;: &quot;10.10.10.10&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;lina&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示版本信息"><a href="#显示版本信息" class="headerlink" title="显示版本信息"></a>显示版本信息</h2><p>ES文档都一个_version的计数器，用来记录文档的变更情况。需要注意的是ES并没有保存历史文档，_version只是一个计数器。需要查看version, 增加查询参数: <code>version=true</code></p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>根据 <code>_id</code>查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"bool"</span>: &#123;</span><br><span class="line">            <span class="attr">"must"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"terms"</span>: &#123;</span><br><span class="line">                        <span class="attr">"_id"</span>: [</span><br><span class="line">                            <span class="string">"12345678"</span>,</span><br><span class="line">                            <span class="string">"12345679"</span></span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定时间范围，这里的 <code>date</code> 是文档中的字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"range"</span> : &#123;</span><br><span class="line">            <span class="attr">"date"</span> : &#123;</span><br><span class="line">                <span class="attr">"gte"</span> : <span class="string">"2019-05-01T00:00:00"</span>,</span><br><span class="line">                <span class="attr">"lte"</span> : <span class="string">"2019-05-01T23:59:59"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组匹配</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 这里 hosts 是一个数组类型</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"bool"</span>: &#123;</span><br><span class="line">            <span class="attr">"should"</span>: &#123;</span><br><span class="line">                <span class="attr">"term"</span>: &#123;</span><br><span class="line">                    <span class="attr">"hosts"</span>: &#123;</span><br><span class="line">                      <span class="attr">"value"</span>: <span class="string">"www.test.gov.cn"</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="bool-查询"><a href="#bool-查询" class="headerlink" title="bool 查询"></a>bool 查询</h2><p>Bool 查询结构如下:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>: &#123;</span><br><span class="line">        <span class="attr">"bool"</span>: &#123;</span><br><span class="line">            <span class="attr">"must"</span>: [],</span><br><span class="line">            <span class="attr">"should"</span>: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 must 对应 <code>AND</code> 操作， should 对应 <code>should</code>操作。需要注意的是，在有 <code>filter</code> 和 <code>must</code>时，<code>should</code>的值不会影响的搜索结构。</p><h2 id="查询聚合"><a href="#查询聚合" class="headerlink" title="查询聚合"></a>查询聚合</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录下ES的常用操作，方便查看。&lt;/p&gt;
    
    </summary>
    
    
      <category term="elasticsearch" scheme="http://yoursite.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>谈谈 python 的并发</title>
    <link href="http://yoursite.com/2019/07/04/python-coroutine/"/>
    <id>http://yoursite.com/2019/07/04/python-coroutine/</id>
    <published>2019-07-04T07:50:07.000Z</published>
    <updated>2019-08-22T04:05:04.393Z</updated>
    
    <content type="html"><![CDATA[<p>并发无外乎进程，线程，协程三种方式。 Python 由于GIL锁的存在，多线程有些鸡雏，只能跑在一个核上。多进程各种语言差不多，创建开销比较大。</p><a id="more"></a><p>协程并不是操作系统内核提供的，它是用户态下实现的。协程主要用在网络上。参考许式伟的文档：大部分你看到的协程（纤程）库只是一个半吊子。它们都只实现了协程的创建和执行权的切换，缺了非常多的内容。包括：</p><ul><li>协程的调度；</li><li>协程的同步、互斥与通讯；</li><li>协程的系统调用包装，尤其是网络 IO 请求的包装。</li></ul><p>python3 的协程主要是 <code>asyncio</code> + <code>aiohttp</code> 实现，其中 <code>aiphttp</code>还存在不少坑。如果是 python2 可以用 <code>gevent</code> 或者 <code>eventlet</code> 之类的库。</p><h2 id="业务类型"><a href="#业务类型" class="headerlink" title="业务类型"></a>业务类型</h2><p>在考虑使用哪种并发模型前，我们需要知道我们的业务场景是什么样的，如果是计算密集的，那多进程的方式肯定速度比较快，如果是I/O密集的，那多线程或者是协程可能比较快。</p><h2 id="并发模型"><a href="#并发模型" class="headerlink" title="并发模型"></a>并发模型</h2><p>常见的并发模型主要用有以下几种：</p><ul><li>协程</li><li>进程 + 队列</li><li>进程池</li><li>线程 + 队列</li><li>线程池</li></ul><h3 id="池化"><a href="#池化" class="headerlink" title="池化"></a>池化</h3><p>线程/进程池的思想是提前创建好线程/进程，然后分配任务，减少了线程/进程的创建和销毁时间。</p><h2 id="实例说明"><a href="#实例说明" class="headerlink" title="实例说明"></a>实例说明</h2><p>这里我们以请求网站为例，来说说使用哪种模型比较好。假设我们有一批url，需要提取每个url的内容。很明显这是一个I/O密集的场景，CPU使用并不高。我们先来试试线程池的性能。</p><p>使用线程池一个需要考虑的地方是线程池的大小设置为多少比较合理。设置小了性能得不到充分发挥，设置大了，会带来很多上下文切换，也会影响性能。这里有一篇文章可以参考下： <a href="http://ifeve.com/how-to-calculate-threadpool-size/" target="_blank" rel="noopener">如何合理地估算线程池大小</a></p><p>大致算法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">最佳线程数目 = （（线程等待时间+线程CPU时间）/线程CPU时间 ）* CPU数目</span><br><span class="line">最佳线程数目 = （线程等待时间与线程CPU时间之比 + 1）* CPU数目</span><br></pre></td></tr></table></figure><p>先来看看这个模型有哪些阶段的耗时：</p><ul><li>线程池的创建时间</li><li>组织并发送http报文时间: 时间很短</li><li>I/O等待时间: 以百度为例，请求一次大概 0.6s, 很多url 的时间都要高于这个时间;</li><li>线程上下文切换时间: 线程的切换是由操作系统完成的，这个我们无法干预；</li></ul><p>但是前面也提到了，python的多线程只会跑在一个核上，所以这个公式并不是很适合python。而且线程等待时间和线程CPU时间也不是很好统计。我们先自己测试下，看看结果。</p><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><ul><li>CPU: 2.2GHZ, 8核</li><li>Memory: 16GB</li><li>Python: 3.7</li><li>参数设置: timeout: 5s</li></ul><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><p>先用 <code>http://www.baidu.com</code> 测试下：</p><table><thead><tr><th>线程池大小</th><th>时间（url=1）</th><th>时间（url=100）</th><th>时间（url=1k）</th><th>时间（url=2k）</th><th>时间（url=1w）</th></tr></thead><tbody><tr><td>10</td><td>0.0609200000763</td><td>0.758232116699</td><td>6.39800596237</td><td>17.6599781513</td><td>66.2937660217</td></tr><tr><td>20</td><td>0.0540590286255</td><td>0.528448104858</td><td>8.01393008232</td><td>9.23072099686</td><td>47.8504650593</td></tr><tr><td>50</td><td>0.0577878952026</td><td>0.560682058334</td><td>5.14659905434</td><td>11.6546461582</td><td>57.1829109192</td></tr><tr><td>100</td><td>0.0589618682861</td><td>0.531494140625</td><td>5.29938697815</td><td>14.6375288963</td><td>53.1387097836</td></tr><tr><td>200</td><td>0.0584230422974</td><td>0.51756310463</td><td>5.5145201683</td><td>12.4125711918</td><td>58.5326759815</td></tr><tr><td>500</td><td>0.0581228733063</td><td>0.514012098312</td><td>5.38542103767</td><td>11.0087881088</td><td>57.4718120098</td></tr></tbody></table><p><code>http://www.baidu.com</code> 单次访问的时间大概在 60ms 左右，对于外网，这算比较短的。</p><ul><li><code>url=1</code>：python 的线程池是在需要的时候才创建线程，而不是一开始就把所有线程创建好，所以这个时间和不用线程池时间是差不多的；</li><li><code>url=100</code>: 较前一列数量翻了100倍，但是时间只增加了10倍。这一列的数据可以看出，线程池的创建时间相对于I/O可以忽略不记；</li><li><code>url=1k</code>: 较前一列数量翻了10倍，时间增加了10倍；</li><li><code>url=2k</code>: 较前一列数量翻了2倍，时间增加了2倍；</li><li><code>url=1w</code>: 较前一列数量翻了5倍，时间增加了5倍；</li></ul><p>从上面的数据库，当 url 访问比较快时（50ms左右），线程池大小在10-20左右比较合理。你可能好奇，线程池设置为 500, 当数量足够多的时候，是否真的能用满线程池，这个很好验证，开两个shell终端，一个运行脚本，另一个通过 <code>ps -T &lt;pid&gt;</code> 查看线程数量。实际结果是可以跑满线程池的。</p><p>再换个慢点的 <code>https://github.com/</code>试试:</p><table><thead><tr><th>线程池大小</th><th>时间（url=1）</th><th>时间（url=100）</th><th>时间（url=1k）</th><th>时间（url=2k）</th><th>时间（url=1w）</th></tr></thead><tbody><tr><td>10</td><td>2.51842594147</td><td>41.9331200123</td><td>382.749531984</td><td>741.501072884</td><td></td></tr><tr><td>20</td><td>2.7753970623</td><td>20.896089077</td><td>191.076680899</td><td>357.12337184</td><td></td></tr><tr><td>50</td><td>1.81620693207</td><td>15.8236629963</td><td>69.2691161633</td><td>122.876123905</td><td></td></tr><tr><td>100</td><td>2.12484884262</td><td>10.5488679409</td><td>38.2335569859</td><td>60.0130498409</td><td></td></tr><tr><td>200</td><td>2.54932188988</td><td>13.314850091</td><td>21.380851984</td><td>31.7573349476</td><td></td></tr><tr><td>500</td><td>2.96766090393</td><td>11.7406990528</td><td>17.1419959068</td><td>26.198912859</td></tr></tbody></table><p>看出来了吗，当线程池的数量增加，时间明显的减少了。理想情况下，忽略线程调度和切换的时间，大致满足如下公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">总耗时 = url数量/线程池大小 * 单个 url 耗时</span><br></pre></td></tr></table></figure><p>再换一批不同的 url 测试下：</p><p><img src="/2019/07/04/python-coroutine/threadpool.png" alt="subscribe"></p><ol><li>先看看 url=1000 的这条线（以右边坐标轴为准），可以发现随着 worker 数量增加，耗时逐渐减少，在worker=100 处趋于平稳；</li><li>url=10 时，耗时基本都在 0.7s左右。这个时候线程池可以放下所有的url, 所以耗时跟 worker数量无关，基本很快就完成了；</li><li>再看看url=100这条线，worker 数量在 120-500 的时候，基本都维持在 5s左右。</li></ol><p><strong>因为是网络测试，所以有一定随机性，网络带宽和稳定性，数据样本对测试结果影响比较大!</strong></p><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><ol><li>线程池的大小在达到一定值时趋于饱和，具体跟样本有关（ThreadPoolExecutor 的默认大小是 CPU核心 * 5）；</li><li>当url数量小于worker数量时，耗时基本相同；</li><li>并不是线程越多越好，创建线程需要消耗内存，带来上下文切换，而且一个系统能创建的线程数量也是有限制的，可以使用 <code>ulimit -a</code> 查看。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;并发无外乎进程，线程，协程三种方式。 Python 由于GIL锁的存在，多线程有些鸡雏，只能跑在一个核上。多进程各种语言差不多，创建开销比较大。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>django ORM</title>
    <link href="http://yoursite.com/2019/07/04/django/"/>
    <id>http://yoursite.com/2019/07/04/django/</id>
    <published>2019-07-04T06:59:39.000Z</published>
    <updated>2019-08-06T11:18:51.877Z</updated>
    
    <content type="html"><![CDATA[<p>这里先记录下常用的操作，后续整理。</p><a id="more"></a><h2 id="数据库更新"><a href="#数据库更新" class="headerlink" title="数据库更新"></a>数据库更新</h2><p>django 有一个 <strong>django_migrations</strong> 用于记录每一次更新。结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; desc django_migrations;</span><br><span class="line">+---------+--------------+------+-----+---------+----------------+</span><br><span class="line">| Field   | Type         | Null | Key | Default | Extra          |</span><br><span class="line">+---------+--------------+------+-----+---------+----------------+</span><br><span class="line">| id      | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| app     | varchar(255) | NO   |     | NULL    |                |</span><br><span class="line">| name    | varchar(255) | NO   |     | NULL    |                |</span><br><span class="line">| applied | datetime(6)  | NO   |     | NULL    |                |</span><br><span class="line">+---------+--------------+------+-----+---------+----------------+</span><br><span class="line"></span><br><span class="line">&gt; select * from django_migrations;</span><br><span class="line">+----+------+--------------+----------------------------+</span><br><span class="line">| id | app  | name         | applied                    |</span><br><span class="line">+----+------+--------------+----------------------------+</span><br><span class="line">|  1 | site | 0001_initial | 2019-05-16 10:56:28.313479 |</span><br><span class="line">+----+------+--------------+----------------------------+</span><br></pre></td></tr></table></figure><p>app 是表的名字， name 前面的序号是变更次数；</p><p>Migrations 步骤如下：</p><ol><li>修改数据库模型；</li><li><code>pyhton manage.py makemigrations my_model</code>, 如果没有改动，使用 <code>—empty</code> 参数;</li><li><code>python manage.py migrate</code>.</li></ol><p>需要注意的是<code>migrate</code>并不是原子操作，也不会加锁，例如在k8s多个pod中执行，<code>django_migrations</code>表中可能会出现多条记录。</p><p>我们也可以在migartions 中执行脚本，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> migrations</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_site</span><span class="params">(apps, schema_editor)</span>:</span></span><br><span class="line">    Site = apps.get_model(<span class="string">'site'</span>, <span class="string">'Site'</span>)</span><br><span class="line"></span><br><span class="line">    do something...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Migration</span><span class="params">(migrations.Migration)</span>:</span></span><br><span class="line"></span><br><span class="line">    dependencies = [</span><br><span class="line">        (<span class="string">'site'</span>, <span class="string">'0001_auto_20190705_1027'</span>),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    operations = [</span><br><span class="line">        migrations.RunPython(update_site)</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取所有对象</span></span><br><span class="line">Model.objects.all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据条件过滤</span></span><br><span class="line">Model.objects.filter(name=<span class="string">"lina"</span>)</span><br></pre></td></tr></table></figure><h3 id="特殊操作"><a href="#特殊操作" class="headerlink" title="特殊操作"></a>特殊操作</h3><ul><li>大于: <code>__gt</code></li><li><p>大于等于: <code>__gte</code></p></li><li><p>小于: <code>__lt</code></p></li><li><p>小于等于: <code>__lte</code></p></li><li><p>包含: <code>__contains</code></p></li><li><p>开头是: <code>__startswith</code></p></li><li><p>结尾是: <code>__endswith</code></p></li><li><p>其中之一: <code>__in</code></p></li><li><p>范围： <code>__range</code></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in</span></span><br><span class="line">Model.object.filter(name__in=[<span class="string">"line"</span>, <span class="string">"Alice"</span>])</span><br></pre></td></tr></table></figure><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新或者创建</span></span><br><span class="line"><span class="comment"># 前面的是 filter, defaults 是更新</span></span><br><span class="line">Industry.objects.update_or_create(</span><br><span class="line">            industry_id=industry_id,</span><br><span class="line">            name=industry_name[INDUSTRY_NAME_CHN],</span><br><span class="line">            defaults=&#123;<span class="string">'name_en'</span>: industry_name[INDUSTRY_NAME_EN]&#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="raw"><a href="#raw" class="headerlink" title="raw"></a>raw</h2><p>Django 可以直接执行 sql 脚本，需要注意的是 django 的 raw 查询必须要有<code>primary key</code>字段，因为返回的是Model 的 QuerySet列表。新增的属性不要也是放到 Model的属性中的，所以名字不要包含特殊字符，这点确实有点蛋疼。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.objects.raw(<span class="string">'SELECT id, first_name, last_name, birth_date FROM myapp_person'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里先记录下常用的操作，后续整理。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>rest framework 学习</title>
    <link href="http://yoursite.com/2019/06/04/restframework/"/>
    <id>http://yoursite.com/2019/06/04/restframework/</id>
    <published>2019-06-04T03:18:50.000Z</published>
    <updated>2019-07-22T06:26:58.888Z</updated>
    
    <content type="html"><![CDATA[<p>rest framework 是 Django 的 api 框架。</p><a id="more"></a><h2 id="参数获取"><a href="#参数获取" class="headerlink" title="参数获取"></a>参数获取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取 QueryString</span></span><br><span class="line">query_params = self.request.query_params</span><br><span class="line">only_latest = query_params.get(<span class="string">'latest'</span>, <span class="keyword">False</span>)  <span class="comment"># get 返回的是 str 类型</span></span><br></pre></td></tr></table></figure><h2 id="APIView"><a href="#APIView" class="headerlink" title="APIView"></a>APIView</h2><p><img src="/2019/06/04/restframework/APIView.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;rest framework 是 Django 的 api 框架。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>sklearn学习</title>
    <link href="http://yoursite.com/2019/05/29/sklearn/"/>
    <id>http://yoursite.com/2019/05/29/sklearn/</id>
    <published>2019-05-29T06:41:04.000Z</published>
    <updated>2019-05-29T07:24:51.309Z</updated>
    
    <content type="html"><![CDATA[<p>Sklearn 笔记</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip 安装</span></span><br><span class="line">pip install -U scikit-learn</span><br><span class="line"></span><br><span class="line"><span class="comment"># conda 安装</span></span><br><span class="line">conda install scikit-learn</span><br></pre></td></tr></table></figure><h2 id="模型优化"><a href="#模型优化" class="headerlink" title="模型优化"></a>模型优化</h2><h2 id="分类器"><a href="#分类器" class="headerlink" title="分类器"></a>分类器</h2><h3 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"></span><br><span class="line">forest_clf = RandomForestClassifier(random_state=<span class="number">42</span>)</span><br><span class="line">forest_clf.fit(X_train, Y_train)</span><br></pre></td></tr></table></figure><h3 id="随机梯度"><a href="#随机梯度" class="headerlink" title="随机梯度"></a>随机梯度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> SGDClassifier</span><br><span class="line"></span><br><span class="line">sgd_clf = SGDClassifier(random_state=<span class="number">42</span>)</span><br><span class="line">sgd_clf.fit(X_train, Y_train)</span><br></pre></td></tr></table></figure><h2 id="误差分析"><a href="#误差分析" class="headerlink" title="误差分析"></a>误差分析</h2><h3 id="混淆矩阵"><a href="#混淆矩阵" class="headerlink" title="混淆矩阵"></a>混淆矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_predict</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用交叉验证做出预测</span></span><br><span class="line">y_train_pred = cross_val_predict(sgd_clf, X_train, y_train, cv=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取混淆矩阵</span></span><br><span class="line">conf_mx = confusion_matrix(Y_train, y_train_pred)</span><br></pre></td></tr></table></figure><p>查看结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 画图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">plt.matshow(conf_mx, cmap=plt.cm.gray)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2019/05/29/sklearn/conf_mx.png" alt=""></p><p>有时候我们仅关注误差数据图像呈现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">row_sums = conf_mx.sum(axis=<span class="number">1</span>, keepdims=<span class="keyword">True</span>)</span><br><span class="line">norm_conf_mx = conf_mx / row_sums <span class="comment"># 混淆矩阵每一列除以每种类型数量</span></span><br><span class="line"></span><br><span class="line">np.fill_diagonal(norm_conf_mx, <span class="number">0</span>)  <span class="comment"># 对角线用0填充</span></span><br><span class="line">plt.matshow(norm_conf_mx, cmap=plt.cm.gray)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2019/05/29/sklearn/conf_mx_norm.png" alt=""></p><p>说明下，这里行代表实际类别，列代表预测的类别。颜色越亮说明分错概率越高。</p><h3 id="准确率"><a href="#准确率" class="headerlink" title="准确率"></a>准确率</h3><h3 id="召回率"><a href="#召回率" class="headerlink" title="召回率"></a>召回率</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sklearn 笔记&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>numpy</title>
    <link href="http://yoursite.com/2019/05/05/ml-numpy/"/>
    <id>http://yoursite.com/2019/05/05/ml-numpy/</id>
    <published>2019-05-05T03:26:16.000Z</published>
    <updated>2019-07-22T06:28:08.408Z</updated>
    
    <content type="html"><![CDATA[<p>numpy 主要用来做数据分析。</p><a id="more"></a><h2 id="生成测试数据"><a href="#生成测试数据" class="headerlink" title="生成测试数据"></a>生成测试数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机洗牌</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># permutation 会返回新的数组，shuffle 是在原来的数组上洗牌</span></span><br><span class="line">shuffled_indices = np.random.permutation(len(data))</span><br><span class="line">test_set_size = int(len(data) * test_ratio)</span><br></pre></td></tr></table></figure><p>Scikit-learn 也提供了分割子集的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">train_set, test_set = train_test_split(housing, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br></pre></td></tr></table></figure><p>分层采样</p><h2 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h2><h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># housing 是 dataForm 对象</span></span><br><span class="line">housing.plot(kind=<span class="string">"scatter"</span>, x=<span class="string">"longtitude"</span>, y=<span class="string">"latitude"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过设置 alpha 可以方面的看出密度</span></span><br><span class="line">housing.plot(kind=<span class="string">"scatter"</span>, x=<span class="string">"longtitude"</span>, y=<span class="string">"latitude"</span>, alpha=<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;numpy 主要用来做数据分析。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>anaconda 常用命令</title>
    <link href="http://yoursite.com/2019/04/30/anaconda-cmd/"/>
    <id>http://yoursite.com/2019/04/30/anaconda-cmd/</id>
    <published>2019-04-30T06:36:16.000Z</published>
    <updated>2019-05-09T03:44:12.627Z</updated>
    
    <content type="html"><![CDATA[<p>Anaconda指的是一个开源的Python发行版本，其包含了conda、Python等180多个科学包及其依赖项。Anaconda 本身支持虚拟环境，不需要安装pyenv.</p><a id="more"></a><h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create</span></span><br><span class="line">conda create --name ml</span><br><span class="line"></span><br><span class="line"><span class="comment"># list env</span></span><br><span class="line">conda info --envs</span><br><span class="line"></span><br><span class="line"><span class="comment"># active env</span></span><br><span class="line">conda activate ml</span><br><span class="line"></span><br><span class="line"><span class="comment"># deactive</span></span><br><span class="line"><span class="built_in">source</span> deactivate</span><br></pre></td></tr></table></figure><p>随机梯度下降分类器</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Anaconda指的是一个开源的Python发行版本，其包含了conda、Python等180多个科学包及其依赖项。Anaconda 本身支持虚拟环境，不需要安装pyenv.&lt;/p&gt;
    
    </summary>
    
      <category term="machine learning" scheme="http://yoursite.com/categories/machine-learning/"/>
    
    
  </entry>
  
  <entry>
    <title>谈谈计算机的编码</title>
    <link href="http://yoursite.com/2019/04/03/python-encode/"/>
    <id>http://yoursite.com/2019/04/03/python-encode/</id>
    <published>2019-04-03T09:40:47.000Z</published>
    <updated>2019-04-08T06:24:59.777Z</updated>
    
    <content type="html"><![CDATA[<p>我们经常听到 ASCII, 大致样子如下图所示。ASCII 由一个 7bit 组成，故只能表示2^7(128)个字符。由于 ASCII 能表示的字符数量有限，对很多语言支持无能为力。于是人们又搞了一套 unicode(又称万国码或者国际码，统一编码等)。 unicode 以4～6个十六进制数表示，前缀加<code>U+</code></p><a id="more"></a><p><img src="/2019/04/03/python-encode/USASCII_code_chart.png" alt="USASCII_code_chart"></p><p>是不是认为全部使用unicode编码就万事大吉了，其实也不是，例如英文字符其实只需要7bit 即可表示，如果每个字符都使用2字节的原Unicode编码传输，其第一字节的8位始终为0。这就造成了比较大的浪费。于是人们又提出了Unicode转换格式（Unicode Transformation Format，简称为UTF） ，我们常听到的 utf-8 编码就是其中的一种。</p><p>UTF-8 使用1~6字节来编码，具体如下：</p><ol><li><p>128个ASCII 使用一个字节编码；</p></li><li><p>拉丁，希腊，等用两个字节编码；</p></li><li><p>少数语言（汉子）使用三字节编码；</p></li><li><p>极少数辅助字符使用4～6字节编码；</p></li></ol><p>这里举个例子说明下。例如我们想表示字母<code>A</code>, 用 ASCII 表示为 <code>100 0001</code>, 如果用 unicode 表示为 <code>U+0041</code>换成二进制是 <code>0000 0000 0000 0000 0000 0100 0000 0001</code>。而使用utf-8编码则为 <code>0100 0001</code>。</p><table><thead><tr><th></th><th>ASCII</th><th>Unicode</th><th>UTF-8</th></tr></thead><tbody><tr><td>A</td><td>100 0001</td><td>0000 0000 0000 0000 0000 0100 0000 0001</td><td>0100 0001</td></tr></tbody></table><h2 id="现代编码模型"><a href="#现代编码模型" class="headerlink" title="现代编码模型"></a>现代编码模型</h2><p>在现代编码模型里要知道一个字符如何映射成计算机里比特，需要经过如下几个步骤。</p><ol><li>知道一个系统需要支持哪些字符，这些字符的集合被称为字符表（Character repertoire）</li><li>给字符表里的抽象字符编上一个数字，也就是字符集合到一个整数集合的映射。这种映射称为编码字符集（CCS:Coded Character Set）,unicode是属于这一层的概念，跟计算机里的什么进制啊没有任何关系，它是完全数学的抽象的。</li><li>将CCS里字符对应的整数转换成有限长度的比特值，便于以后计算机使用一定长度的二进制形式表示该整数。这个对应关系被称为字符编码表（CEF:Character Encoding Form）UTF-8, UTF-16都属于这层。</li><li>对于CEF得到的比特值具体如何在计算机中进行存储，传输。因为存在大端小端的问题，这就会跟具体的操作系统相关了。这种解决方案称为字符编码方案（CES:Character Encoding Scheme）。</li></ol><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>字符集从字面意思讲就是字符的集合，例如可以把数字0-9, 字母a-z, A-Z 一起组成一个字符集，可以把所有的汉子组成一个字符集。</p><h2 id="码位"><a href="#码位" class="headerlink" title="码位"></a>码位</h2><p>上面说的 ASCII 和 unicode 都是码位，也称编码的位置，英文 code point. 不同的字符集有不同的码位。码位其实就是一个字符和计算机二进制的映射。简单地讲就是定义了字符集里一个字符对应的二进制编码。</p><h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>字符编码主要是为了减少码位的长度，方便传输。把码位转换成字节序列的过程叫编码，把字节序列转换成码位的过程叫解码。</p><p>在 python2 中 <code>str</code> 是原始序列，而 unicode 则需要加 <code>u</code>表示，在 python3 中 <code>str</code> 就是 unicode 类型。eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>country = <span class="string">u'中国'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(country)</span><br><span class="line">&lt;type <span class="string">'unicode'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>country</span><br><span class="line"><span class="string">u'\u4e2d\u56fd'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = country.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name</span><br><span class="line"><span class="string">'\xe4\xb8\xad\xe5\x9b\xbd'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> names</span><br><span class="line">中国</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>city = <span class="string">'苏州'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(city)</span><br><span class="line">&lt;type <span class="string">'str'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>city</span><br><span class="line"><span class="string">'\xe8\x8b\x8f\xe5\xb7\x9e'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>city.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="string">u'\u82cf\u5dde'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>country = <span class="string">'中国'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(country)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">country</span></span></span><br><span class="line"><span class="class">'中国'</span></span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="https://en.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/ASCII</a></p><p>[2] <a href="https://en.wikipedia.org/wiki/Unicode" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Unicode</a></p><p>[3] <a href="https://en.wikipedia.org/wiki/Character_encoding" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Character_encoding</a></p><p>[4] <a href="https://en.wikipedia.org/wiki/Code_point" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Code_point</a></p><p>[5] <a href="http://blog.jobbole.com/39309/" target="_blank" rel="noopener">http://blog.jobbole.com/39309/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们经常听到 ASCII, 大致样子如下图所示。ASCII 由一个 7bit 组成，故只能表示2^7(128)个字符。由于 ASCII 能表示的字符数量有限，对很多语言支持无能为力。于是人们又搞了一套 unicode(又称万国码或者国际码，统一编码等)。 unicode 以4～6个十六进制数表示，前缀加&lt;code&gt;U+&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常用 Docker 容器</title>
    <link href="http://yoursite.com/2019/03/07/docker-common/"/>
    <id>http://yoursite.com/2019/03/07/docker-common/</id>
    <published>2019-03-07T07:35:43.000Z</published>
    <updated>2019-09-16T10:41:20.239Z</updated>
    
    <content type="html"><![CDATA[<p>在开发过程中，常常会使用到 mariadb, redis, rabbitmq 等通用组件，这里使用 docker-compose 管理，方便本地调试。</p><a id="more"></a><p>这里使用 docker-compose 管理，通过域名来访问公共组件。这种方式的好处是跟外界网络无关，不用关心IP变化。需要注意的是服务和公共组件需要使用相同的docker 网络。</p><h2 id="创建通用网络"><a href="#创建通用网络" class="headerlink" title="创建通用网络"></a>创建通用网络</h2><p>由于<code>docker-compose</code> 默认网络是 <code>projectname]_default</code> 这种形式，即使指定了名字，<code>docker-compose</code>也会自动加上 <code>projectname_</code>不适合跨项目。因此这里先在定义一个网络。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create dev</span><br></pre></td></tr></table></figure><h3 id="创建通用容器"><a href="#创建通用容器" class="headerlink" title="创建通用容器"></a>创建通用容器</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  mariadb:</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">mariadb:latest</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">mariadb</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="attr">      MYSQL_ROOT_PASSWORD:</span> <span class="string">"your_pwd"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">rabbitmq:latest</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">rabbitmq</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">15672</span><span class="string">:15672</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">5672</span><span class="string">:5672</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    restart:</span> <span class="string">unless-stopped</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">redis:latest</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">redis</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line"><span class="attr">  default:</span></span><br><span class="line"><span class="attr">    external:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">my-pre-existing-network</span></span><br></pre></td></tr></table></figure><p>附 <code>docker-compose</code> 命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 后台启动容器</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止容器</span></span><br><span class="line">docker-compose stop</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="https://docs.docker.com/compose/networking/" target="_blank" rel="noopener">https://docs.docker.com/compose/networking/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发过程中，常常会使用到 mariadb, redis, rabbitmq 等通用组件，这里使用 docker-compose 管理，方便本地调试。&lt;/p&gt;
    
    </summary>
    
      <category term="PaaS" scheme="http://yoursite.com/categories/PaaS/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>mac 常用配置</title>
    <link href="http://yoursite.com/2019/01/23/mac-config/"/>
    <id>http://yoursite.com/2019/01/23/mac-config/</id>
    <published>2019-01-23T08:12:46.000Z</published>
    <updated>2019-01-23T08:16:23.322Z</updated>
    
    <content type="html"><![CDATA[<p>这里主要记录mac使用中的一些小问题。</p><a id="more"></a><h2 id="oh-my-zsh-去掉history共享"><a href="#oh-my-zsh-去掉history共享" class="headerlink" title="oh-my-zsh 去掉history共享"></a>oh-my-zsh 去掉history共享</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Add follow line in $ZSH/oh-my-zsh.sh</span><br><span class="line">unsetopt share_history</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里主要记录mac使用中的一些小问题。&lt;/p&gt;
    
    </summary>
    
      <category term="mac" scheme="http://yoursite.com/categories/mac/"/>
    
    
      <category term="mac" scheme="http://yoursite.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>使用cProfile分析python性能</title>
    <link href="http://yoursite.com/2019/01/10/cprofile/"/>
    <id>http://yoursite.com/2019/01/10/cprofile/</id>
    <published>2019-01-10T11:17:26.000Z</published>
    <updated>2019-01-10T11:26:44.030Z</updated>
    
    <content type="html"><![CDATA[<p>当我们的确是有需要开始真正优化我们的Python程序的时候，我们要做的第一步并不是盲目的去做优化，而是对我们现有的程序进行分析，发现程序的性能瓶颈进而进行针对性的优化。这样才会使我们花时间和精力去做的优化获得最大的效果。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们的确是有需要开始真正优化我们的Python程序的时候，我们要做的第一步并不是盲目的去做优化，而是对我们现有的程序进行分析，发现程序的性能瓶颈进而进行针对性的优化。这样才会使我们花时间和精力去做的优化获得最大的效果。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
</feed>
