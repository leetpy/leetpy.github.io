<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>leesea</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-24T09:39:15.922Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>leesea</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vagrant 使用</title>
    <link href="http://yoursite.com/2019/07/24/vagrant/"/>
    <id>http://yoursite.com/2019/07/24/vagrant/</id>
    <published>2019-07-24T06:33:09.000Z</published>
    <updated>2019-07-24T09:39:15.922Z</updated>
    
    <content type="html"><![CDATA[<p>Vagrant 是一款虚拟机管理工具，支持hyper, libvirt, virtual box, VMware_desktop, 可以和IDE 集成。使用vagrant的好处是可以在windows或者macos下编写代码，在linux下运行。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://www.vagrantup.com/downloads.html" target="_blank" rel="noopener">https://www.vagrantup.com/downloads.html</a> 下载对应安装包安装即可。</p><h2 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h2><p>Vagrant 可以使用命令安装虚拟机，不过网络容易断，建议先下载镜像，再离线安装。</p><h3 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h3><p>虚拟机类型根据自己需求选择，这里选择的是 virtualbox</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vagrant box add centos/7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">This box can work with multiple providers! The providers that it</span><br><span class="line">can work with are listed below. Please review the list and choose</span><br><span class="line">the provider you will be working with.</span><br><span class="line"></span><br><span class="line">1) hyperv</span><br><span class="line">2) libvirt</span><br><span class="line">3) virtualbox</span><br><span class="line">4) vmware_desktop</span><br><span class="line"></span><br><span class="line">Enter your choice: 3</span><br></pre></td></tr></table></figure><h3 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h3><p>vagrant 网站提供了一些镜像下载，地址如下： <a href="https://app.vagrantup.com/boxes/search" target="_blank" rel="noopener">https://app.vagrantup.com/boxes/search</a>, 这里以centos7为例：</p><ol><li>下载镜像 centos7 的镜像；</li><li><code>vagrant box add —name &#39;centos/7&#39; [box_path]</code></li></ol><h2 id="虚拟机操作"><a href="#虚拟机操作" class="headerlink" title="虚拟机操作"></a>虚拟机操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动虚拟机</span></span><br><span class="line">vagrant up</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录虚拟机(默认账号密码都是vagrant, 可以 su 到 root)</span></span><br><span class="line">vagrant ssh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭虚拟机</span></span><br><span class="line">vagrant halt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 销毁虚拟机</span></span><br><span class="line">vagrant destroy</span><br></pre></td></tr></table></figure><h2 id="pycharm-集成"><a href="#pycharm-集成" class="headerlink" title="pycharm 集成"></a>pycharm 集成</h2><p>Vagrant 只支持pycharm 专业版，不需要单独安装插件。</p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><ol><li><p>vboxsf  mount 问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vagrant plugin install vagrant-vbguest</span><br><span class="line">vagrant destroy &amp;&amp; vagrant up</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vagrant 是一款虚拟机管理工具，支持hyper, libvirt, virtual box, VMware_desktop, 可以和IDE 集成。使用vagrant的好处是可以在windows或者macos下编写代码，在linux下运行。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python 时间日期</title>
    <link href="http://yoursite.com/2019/07/23/python-date/"/>
    <id>http://yoursite.com/2019/07/23/python-date/</id>
    <published>2019-07-23T02:01:52.000Z</published>
    <updated>2019-07-23T08:03:52.749Z</updated>
    
    <content type="html"><![CDATA[<p>时间和日期常常会在编程中使用。</p><a id="more"></a><h2 id="字符串和日期转换"><a href="#字符串和日期转换" class="headerlink" title="字符串和日期转换"></a>字符串和日期转换</h2><ul><li><code>strptime</code> = “string parse time”</li><li><code>strftime</code> = “string format time”</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># str 转 datetime</span></span><br><span class="line">datetime_obj = datetime.strptime(<span class="string">'Jun 1 2005  1:33PM'</span>, <span class="string">'%b %d %Y %I:%M%p'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime 转 str</span></span><br><span class="line">date_str = datetime.strftime(datetime_obj, <span class="string">'%b %d %Y %I:%M%p'</span>)</span><br></pre></td></tr></table></figure><h2 id="datetime-转-date"><a href="#datetime-转-date" class="headerlink" title="datetime 转 date"></a>datetime 转 date</h2><p>使用 <code>date</code> 函数转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">date_str = <span class="string">'2019.01.22'</span></span><br><span class="line">index_date = datetime.strptime(date_str, <span class="string">"%Y.%m.%d"</span>).date()</span><br></pre></td></tr></table></figure><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前日期</span></span><br><span class="line">today = datetime.date.today()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 昨天</span></span><br><span class="line">yesterday = today + datetime.timedelta(<span class="number">-11</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 明天</span></span><br><span class="line">tomorrow = today + datetime.timedelta(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="日期比较"><a href="#日期比较" class="headerlink" title="日期比较"></a>日期比较</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># date 类型比较</span></span><br><span class="line">days = (today - tomorrow).days()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># datetime 类型比较</span></span><br><span class="line">datetime1 &gt; datetime2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间和日期常常会在编程中使用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch 笔记</title>
    <link href="http://yoursite.com/2019/07/16/elasticsearch/"/>
    <id>http://yoursite.com/2019/07/16/elasticsearch/</id>
    <published>2019-07-16T02:17:28.000Z</published>
    <updated>2019-07-22T02:26:02.691Z</updated>
    
    <content type="html"><![CDATA[<p>记录下ES的常用操作，方便查看。</p><a id="more"></a><h2 id="painless"><a href="#painless" class="headerlink" title="painless"></a>painless</h2><p>ES 使用的是 <code>painless</code> 语言。</p><h2 id="更新数组"><a href="#更新数组" class="headerlink" title="更新数组"></a>更新数组</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h2><p><strong>删除单个索引</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /index_name</span><br></pre></td></tr></table></figure><p><strong>删除所有索引</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 两张选其一即可</span><br><span class="line">DELETE /_all</span><br><span class="line">DELETE /*</span><br></pre></td></tr></table></figure><p><strong>索引复制</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /_reindex?wait_for_completion=false</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;source&quot;: &#123;</span><br><span class="line">    &quot;index&quot;: &quot;source_index&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dest&quot;: &#123;</span><br><span class="line">    &quot;index&quot;: &quot;target_index&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h2><p><strong>删除单个文档</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /index/_doc/id</span><br></pre></td></tr></table></figure><p><strong>文档重建</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /index/type/id</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;ip&quot;: &quot;10.10.10.10&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;lina&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="显示版本信息"><a href="#显示版本信息" class="headerlink" title="显示版本信息"></a>显示版本信息</h2><p>ES文档都一个_version的计数器，用来记录文档的变更情况。需要注意的是ES并没有保存历史文档，_version只是一个计数器。需要查看version, 增加查询参数: <code>version=true</code></p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>根据 <code>_id</code>查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;bool&quot;: &#123;</span><br><span class="line">            &quot;must&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;terms&quot;: &#123;</span><br><span class="line">                        &quot;_id&quot;: [</span><br><span class="line">                            &quot;12345678&quot;,</span><br><span class="line">                            &quot;12345679&quot;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定时间范围，这里的 <code>date</code> 是文档中的字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;: &#123;</span><br><span class="line">        &quot;range&quot; : &#123;</span><br><span class="line">            &quot;date&quot; : &#123;</span><br><span class="line">                &quot;gte&quot; : &quot;2019-05-01T00:00:00&quot;,</span><br><span class="line">                &quot;lte&quot; : &quot;2019-05-01T23:59:59&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录下ES的常用操作，方便查看。&lt;/p&gt;
    
    </summary>
    
    
      <category term="elasticsearch" scheme="http://yoursite.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>谈谈 python 的并发</title>
    <link href="http://yoursite.com/2019/07/04/python-coroutine/"/>
    <id>http://yoursite.com/2019/07/04/python-coroutine/</id>
    <published>2019-07-04T07:50:07.000Z</published>
    <updated>2019-07-15T06:18:41.314Z</updated>
    
    <content type="html"><![CDATA[<p>并发无外乎进程，线程，协程三种方式。 Python 由于GIL锁的存在，多线程有些鸡雏，只能跑在一个核上。多进程各种语言差不多，创建开销比较大。</p><a id="more"></a><p>协程并不是操作系统内核提供的，它是用户态下实现的。协程主要用在网络上。参考许式伟的文档：大部分你看到的协程（纤程）库只是一个半吊子。它们都只实现了协程的创建和执行权的切换，缺了非常多的内容。包括：</p><ul><li>协程的调度；</li><li>协程的同步、互斥与通讯；</li><li>协程的系统调用包装，尤其是网络 IO 请求的包装。</li></ul><p>python3 的协程主要是 <code>asyncio</code> + <code>aiohttp</code> 实现，其中 <code>aiphttp</code>还存在不少坑。如果是 python2 可以用 <code>gevent</code> 或者 <code>eventlet</code> 之类的库。</p><h2 id="future-模块"><a href="#future-模块" class="headerlink" title="future 模块"></a>future 模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> as_completed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(i)</span>:</span></span><br><span class="line">  <span class="comment"># do something</span></span><br><span class="line">  time.sleep(random.randint(<span class="number">1</span>, <span class="number">5</span>))</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="comment"># max_workers 指定线程池大小，如果不指定默认是 cpu *5</span></span><br><span class="line">p = ThreadPoolExecutor(max_workers=<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交任务</span></span><br><span class="line">tasks = [p.submit(foo, i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取返回结果, 这里的返回并不是按照提交顺序来的，而是谁先完成，谁先返回</span></span><br><span class="line"><span class="keyword">for</span> future <span class="keyword">in</span> as_completed(tasks):</span><br><span class="line">  print(future.result())</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 如果希望有序返回，使用 map</span></span><br><span class="line"><span class="comment"># 这里 result 是生成器，可以使用 list(result) 转换为 list 类型</span></span><br><span class="line">result = p.map(foo, range(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;并发无外乎进程，线程，协程三种方式。 Python 由于GIL锁的存在，多线程有些鸡雏，只能跑在一个核上。多进程各种语言差不多，创建开销比较大。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>django ORM</title>
    <link href="http://yoursite.com/2019/07/04/django/"/>
    <id>http://yoursite.com/2019/07/04/django/</id>
    <published>2019-07-04T06:59:39.000Z</published>
    <updated>2019-07-15T08:21:29.831Z</updated>
    
    <content type="html"><![CDATA[<p>这里先记录下常用的操作，后续整理。</p><a id="more"></a><h2 id="数据库更新"><a href="#数据库更新" class="headerlink" title="数据库更新"></a>数据库更新</h2><p>django 有一个 <strong>django_migrations</strong> 用于记录每一次更新。结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; desc django_migrations;</span><br><span class="line">+---------+--------------+------+-----+---------+----------------+</span><br><span class="line">| Field   | Type         | Null | Key | Default | Extra          |</span><br><span class="line">+---------+--------------+------+-----+---------+----------------+</span><br><span class="line">| id      | int(11)      | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| app     | varchar(255) | NO   |     | NULL    |                |</span><br><span class="line">| name    | varchar(255) | NO   |     | NULL    |                |</span><br><span class="line">| applied | datetime(6)  | NO   |     | NULL    |                |</span><br><span class="line">+---------+--------------+------+-----+---------+----------------+</span><br><span class="line"></span><br><span class="line">&gt; select * from django_migrations;</span><br><span class="line">+----+------+--------------+----------------------------+</span><br><span class="line">| id | app  | name         | applied                    |</span><br><span class="line">+----+------+--------------+----------------------------+</span><br><span class="line">|  1 | site | 0001_initial | 2019-05-16 10:56:28.313479 |</span><br><span class="line">+----+------+--------------+----------------------------+</span><br></pre></td></tr></table></figure><p>app 是表的名字， name 前面的序号是变更次数；</p><p>Migrations 步骤如下：</p><ol><li>修改数据库模型；</li><li><code>pyhton manage.py makemigrations my_model</code>, 如果没有改动，使用 <code>—empty</code> 参数;</li><li><code>python manage.py migrate</code>.</li></ol><p>需要注意的是<code>migrate</code>并不是原子操作，也不会加锁，例如在k8s多个pod中执行，<code>django_migrations</code>表中可能会出现多条记录。</p><p>我们也可以在migartions 中执行脚本，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> migrations</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_site</span><span class="params">(apps, schema_editor)</span>:</span></span><br><span class="line">    Site = apps.get_model(<span class="string">'site'</span>, <span class="string">'Site'</span>)</span><br><span class="line"></span><br><span class="line">    do something...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Migration</span><span class="params">(migrations.Migration)</span>:</span></span><br><span class="line"></span><br><span class="line">    dependencies = [</span><br><span class="line">        (<span class="string">'site'</span>, <span class="string">'0001_auto_20190705_1027'</span>),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    operations = [</span><br><span class="line">        migrations.RunPython(update_site)</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取所有对象</span></span><br><span class="line">Model.objects.all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据条件过滤</span></span><br><span class="line">Model.objects.filter(name=<span class="string">"lina"</span>)</span><br></pre></td></tr></table></figure><h3 id="特殊操作"><a href="#特殊操作" class="headerlink" title="特殊操作"></a>特殊操作</h3><ul><li>大于: <code>__gt</code></li><li><p>大于等于: <code>__gte</code></p></li><li><p>小于: <code>__lt</code></p></li><li><p>小于等于: <code>__lte</code></p></li><li><p>包含: <code>__contains</code></p></li><li><p>开头是: <code>__startswith</code></p></li><li><p>结尾是: <code>__endswith</code></p></li><li><p>其中之一: <code>__in</code></p></li><li><p>范围： <code>__range</code></p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in</span></span><br><span class="line">Model.object.filter(name__in=[<span class="string">"line"</span>, <span class="string">"Alice"</span>])</span><br></pre></td></tr></table></figure><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新或者创建</span></span><br><span class="line"><span class="comment"># 前面的是 filter, defaults 是更新</span></span><br><span class="line">Industry.objects.update_or_create(</span><br><span class="line">            industry_id=industry_id,</span><br><span class="line">            name=industry_name[INDUSTRY_NAME_CHN],</span><br><span class="line">            defaults=&#123;<span class="string">'name_en'</span>: industry_name[INDUSTRY_NAME_EN]&#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里先记录下常用的操作，后续整理。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>rest framework 学习</title>
    <link href="http://yoursite.com/2019/06/04/restframework/"/>
    <id>http://yoursite.com/2019/06/04/restframework/</id>
    <published>2019-06-04T03:18:50.000Z</published>
    <updated>2019-07-22T06:26:58.888Z</updated>
    
    <content type="html"><![CDATA[<p>rest framework 是 Django 的 api 框架。</p><a id="more"></a><h2 id="参数获取"><a href="#参数获取" class="headerlink" title="参数获取"></a>参数获取</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取 QueryString</span></span><br><span class="line">query_params = self.request.query_params</span><br><span class="line">only_latest = query_params.get(<span class="string">'latest'</span>, <span class="keyword">False</span>)  <span class="comment"># get 返回的是 str 类型</span></span><br></pre></td></tr></table></figure><h2 id="APIView"><a href="#APIView" class="headerlink" title="APIView"></a>APIView</h2><p><img src="/2019/06/04/restframework/APIView.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;rest framework 是 Django 的 api 框架。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>sklearn学习</title>
    <link href="http://yoursite.com/2019/05/29/sklearn/"/>
    <id>http://yoursite.com/2019/05/29/sklearn/</id>
    <published>2019-05-29T06:41:04.000Z</published>
    <updated>2019-05-29T07:24:51.309Z</updated>
    
    <content type="html"><![CDATA[<p>Sklearn 笔记</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip 安装</span></span><br><span class="line">pip install -U scikit-learn</span><br><span class="line"></span><br><span class="line"><span class="comment"># conda 安装</span></span><br><span class="line">conda install scikit-learn</span><br></pre></td></tr></table></figure><h2 id="模型优化"><a href="#模型优化" class="headerlink" title="模型优化"></a>模型优化</h2><h2 id="分类器"><a href="#分类器" class="headerlink" title="分类器"></a>分类器</h2><h3 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"></span><br><span class="line">forest_clf = RandomForestClassifier(random_state=<span class="number">42</span>)</span><br><span class="line">forest_clf.fit(X_train, Y_train)</span><br></pre></td></tr></table></figure><h3 id="随机梯度"><a href="#随机梯度" class="headerlink" title="随机梯度"></a>随机梯度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> SGDClassifier</span><br><span class="line"></span><br><span class="line">sgd_clf = SGDClassifier(random_state=<span class="number">42</span>)</span><br><span class="line">sgd_clf.fit(X_train, Y_train)</span><br></pre></td></tr></table></figure><h2 id="误差分析"><a href="#误差分析" class="headerlink" title="误差分析"></a>误差分析</h2><h3 id="混淆矩阵"><a href="#混淆矩阵" class="headerlink" title="混淆矩阵"></a>混淆矩阵</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> cross_val_predict</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> confusion_matrix</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用交叉验证做出预测</span></span><br><span class="line">y_train_pred = cross_val_predict(sgd_clf, X_train, y_train, cv=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取混淆矩阵</span></span><br><span class="line">conf_mx = confusion_matrix(Y_train, y_train_pred)</span><br></pre></td></tr></table></figure><p>查看结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 画图</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">%matplotlib inline</span><br><span class="line">plt.matshow(conf_mx, cmap=plt.cm.gray)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2019/05/29/sklearn/conf_mx.png" alt=""></p><p>有时候我们仅关注误差数据图像呈现。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">row_sums = conf_mx.sum(axis=<span class="number">1</span>, keepdims=<span class="keyword">True</span>)</span><br><span class="line">norm_conf_mx = conf_mx / row_sums <span class="comment"># 混淆矩阵每一列除以每种类型数量</span></span><br><span class="line"></span><br><span class="line">np.fill_diagonal(norm_conf_mx, <span class="number">0</span>)  <span class="comment"># 对角线用0填充</span></span><br><span class="line">plt.matshow(norm_conf_mx, cmap=plt.cm.gray)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="/2019/05/29/sklearn/conf_mx_norm.png" alt=""></p><p>说明下，这里行代表实际类别，列代表预测的类别。颜色越亮说明分错概率越高。</p><h3 id="准确率"><a href="#准确率" class="headerlink" title="准确率"></a>准确率</h3><h3 id="召回率"><a href="#召回率" class="headerlink" title="召回率"></a>召回率</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sklearn 笔记&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>numpy</title>
    <link href="http://yoursite.com/2019/05/05/ml-numpy/"/>
    <id>http://yoursite.com/2019/05/05/ml-numpy/</id>
    <published>2019-05-05T03:26:16.000Z</published>
    <updated>2019-07-22T06:28:08.408Z</updated>
    
    <content type="html"><![CDATA[<p>numpy 主要用来做数据分析。</p><a id="more"></a><h2 id="生成测试数据"><a href="#生成测试数据" class="headerlink" title="生成测试数据"></a>生成测试数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 随机洗牌</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># permutation 会返回新的数组，shuffle 是在原来的数组上洗牌</span></span><br><span class="line">shuffled_indices = np.random.permutation(len(data))</span><br><span class="line">test_set_size = int(len(data) * test_ratio)</span><br></pre></td></tr></table></figure><p>Scikit-learn 也提供了分割子集的方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"></span><br><span class="line">train_set, test_set = train_test_split(housing, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br></pre></td></tr></table></figure><p>分层采样</p><h2 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h2><h3 id="散点图"><a href="#散点图" class="headerlink" title="散点图"></a>散点图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># housing 是 dataForm 对象</span></span><br><span class="line">housing.plot(kind=<span class="string">"scatter"</span>, x=<span class="string">"longtitude"</span>, y=<span class="string">"latitude"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过设置 alpha 可以方面的看出密度</span></span><br><span class="line">housing.plot(kind=<span class="string">"scatter"</span>, x=<span class="string">"longtitude"</span>, y=<span class="string">"latitude"</span>, alpha=<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;numpy 主要用来做数据分析。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>anaconda 常用命令</title>
    <link href="http://yoursite.com/2019/04/30/anaconda-cmd/"/>
    <id>http://yoursite.com/2019/04/30/anaconda-cmd/</id>
    <published>2019-04-30T06:36:16.000Z</published>
    <updated>2019-05-09T03:44:12.627Z</updated>
    
    <content type="html"><![CDATA[<p>Anaconda指的是一个开源的Python发行版本，其包含了conda、Python等180多个科学包及其依赖项。Anaconda 本身支持虚拟环境，不需要安装pyenv.</p><a id="more"></a><h2 id="虚拟环境"><a href="#虚拟环境" class="headerlink" title="虚拟环境"></a>虚拟环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create</span></span><br><span class="line">conda create --name ml</span><br><span class="line"></span><br><span class="line"><span class="comment"># list env</span></span><br><span class="line">conda info --envs</span><br><span class="line"></span><br><span class="line"><span class="comment"># active env</span></span><br><span class="line">conda activate ml</span><br><span class="line"></span><br><span class="line"><span class="comment"># deactive</span></span><br><span class="line"><span class="built_in">source</span> deactivate</span><br></pre></td></tr></table></figure><p>随机梯度下降分类器</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Anaconda指的是一个开源的Python发行版本，其包含了conda、Python等180多个科学包及其依赖项。Anaconda 本身支持虚拟环境，不需要安装pyenv.&lt;/p&gt;
    
    </summary>
    
      <category term="machine learning" scheme="http://yoursite.com/categories/machine-learning/"/>
    
    
  </entry>
  
  <entry>
    <title>谈谈计算机的编码</title>
    <link href="http://yoursite.com/2019/04/03/python-encode/"/>
    <id>http://yoursite.com/2019/04/03/python-encode/</id>
    <published>2019-04-03T09:40:47.000Z</published>
    <updated>2019-04-08T06:24:59.777Z</updated>
    
    <content type="html"><![CDATA[<p>我们经常听到 ASCII, 大致样子如下图所示。ASCII 由一个 7bit 组成，故只能表示2^7(128)个字符。由于 ASCII 能表示的字符数量有限，对很多语言支持无能为力。于是人们又搞了一套 unicode(又称万国码或者国际码，统一编码等)。 unicode 以4～6个十六进制数表示，前缀加<code>U+</code></p><a id="more"></a><p><img src="/2019/04/03/python-encode/USASCII_code_chart.png" alt="USASCII_code_chart"></p><p>是不是认为全部使用unicode编码就万事大吉了，其实也不是，例如英文字符其实只需要7bit 即可表示，如果每个字符都使用2字节的原Unicode编码传输，其第一字节的8位始终为0。这就造成了比较大的浪费。于是人们又提出了Unicode转换格式（Unicode Transformation Format，简称为UTF） ，我们常听到的 utf-8 编码就是其中的一种。</p><p>UTF-8 使用1~6字节来编码，具体如下：</p><ol><li><p>128个ASCII 使用一个字节编码；</p></li><li><p>拉丁，希腊，等用两个字节编码；</p></li><li><p>少数语言（汉子）使用三字节编码；</p></li><li><p>极少数辅助字符使用4～6字节编码；</p></li></ol><p>这里举个例子说明下。例如我们想表示字母<code>A</code>, 用 ASCII 表示为 <code>100 0001</code>, 如果用 unicode 表示为 <code>U+0041</code>换成二进制是 <code>0000 0000 0000 0000 0000 0100 0000 0001</code>。而使用utf-8编码则为 <code>0100 0001</code>。</p><table><thead><tr><th></th><th>ASCII</th><th>Unicode</th><th>UTF-8</th></tr></thead><tbody><tr><td>A</td><td>100 0001</td><td>0000 0000 0000 0000 0000 0100 0000 0001</td><td>0100 0001</td></tr></tbody></table><h2 id="现代编码模型"><a href="#现代编码模型" class="headerlink" title="现代编码模型"></a>现代编码模型</h2><p>在现代编码模型里要知道一个字符如何映射成计算机里比特，需要经过如下几个步骤。</p><ol><li>知道一个系统需要支持哪些字符，这些字符的集合被称为字符表（Character repertoire）</li><li>给字符表里的抽象字符编上一个数字，也就是字符集合到一个整数集合的映射。这种映射称为编码字符集（CCS:Coded Character Set）,unicode是属于这一层的概念，跟计算机里的什么进制啊没有任何关系，它是完全数学的抽象的。</li><li>将CCS里字符对应的整数转换成有限长度的比特值，便于以后计算机使用一定长度的二进制形式表示该整数。这个对应关系被称为字符编码表（CEF:Character Encoding Form）UTF-8, UTF-16都属于这层。</li><li>对于CEF得到的比特值具体如何在计算机中进行存储，传输。因为存在大端小端的问题，这就会跟具体的操作系统相关了。这种解决方案称为字符编码方案（CES:Character Encoding Scheme）。</li></ol><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>字符集从字面意思讲就是字符的集合，例如可以把数字0-9, 字母a-z, A-Z 一起组成一个字符集，可以把所有的汉子组成一个字符集。</p><h2 id="码位"><a href="#码位" class="headerlink" title="码位"></a>码位</h2><p>上面说的 ASCII 和 unicode 都是码位，也称编码的位置，英文 code point. 不同的字符集有不同的码位。码位其实就是一个字符和计算机二进制的映射。简单地讲就是定义了字符集里一个字符对应的二进制编码。</p><h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><p>字符编码主要是为了减少码位的长度，方便传输。把码位转换成字节序列的过程叫编码，把字节序列转换成码位的过程叫解码。</p><p>在 python2 中 <code>str</code> 是原始序列，而 unicode 则需要加 <code>u</code>表示，在 python3 中 <code>str</code> 就是 unicode 类型。eg:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>country = <span class="string">u'中国'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(country)</span><br><span class="line">&lt;type <span class="string">'unicode'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>country</span><br><span class="line"><span class="string">u'\u4e2d\u56fd'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name = country.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name</span><br><span class="line"><span class="string">'\xe4\xb8\xad\xe5\x9b\xbd'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> names</span><br><span class="line">中国</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>city = <span class="string">'苏州'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(city)</span><br><span class="line">&lt;type <span class="string">'str'</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>city</span><br><span class="line"><span class="string">'\xe8\x8b\x8f\xe5\xb7\x9e'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>city.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="string">u'\u82cf\u5dde'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># python3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>country = <span class="string">'中国'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(country)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">country</span></span></span><br><span class="line"><span class="class">'中国'</span></span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="https://en.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/ASCII</a></p><p>[2] <a href="https://en.wikipedia.org/wiki/Unicode" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Unicode</a></p><p>[3] <a href="https://en.wikipedia.org/wiki/Character_encoding" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Character_encoding</a></p><p>[4] <a href="https://en.wikipedia.org/wiki/Code_point" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Code_point</a></p><p>[5] <a href="http://blog.jobbole.com/39309/" target="_blank" rel="noopener">http://blog.jobbole.com/39309/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们经常听到 ASCII, 大致样子如下图所示。ASCII 由一个 7bit 组成，故只能表示2^7(128)个字符。由于 ASCII 能表示的字符数量有限，对很多语言支持无能为力。于是人们又搞了一套 unicode(又称万国码或者国际码，统一编码等)。 unicode 以4～6个十六进制数表示，前缀加&lt;code&gt;U+&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>常用 Docker 容器</title>
    <link href="http://yoursite.com/2019/03/07/docker-common/"/>
    <id>http://yoursite.com/2019/03/07/docker-common/</id>
    <published>2019-03-07T07:35:43.000Z</published>
    <updated>2019-07-01T07:13:11.521Z</updated>
    
    <content type="html"><![CDATA[<p>主要记录开发过程中常用的容器创建命令。</p><a id="more"></a><h2 id="Rabbitmq"><a href="#Rabbitmq" class="headerlink" title="Rabbitmq"></a>Rabbitmq</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq</span><br><span class="line">docker run -d --hostname my-rabbit --name rabbitmq -p 15672:15672 -p 5672:5672 rabbitmq</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要记录开发过程中常用的容器创建命令。&lt;/p&gt;
    
    </summary>
    
      <category term="PaaS" scheme="http://yoursite.com/categories/PaaS/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>mac 常用配置</title>
    <link href="http://yoursite.com/2019/01/23/mac-config/"/>
    <id>http://yoursite.com/2019/01/23/mac-config/</id>
    <published>2019-01-23T08:12:46.000Z</published>
    <updated>2019-01-23T08:16:23.322Z</updated>
    
    <content type="html"><![CDATA[<p>这里主要记录mac使用中的一些小问题。</p><a id="more"></a><h2 id="oh-my-zsh-去掉history共享"><a href="#oh-my-zsh-去掉history共享" class="headerlink" title="oh-my-zsh 去掉history共享"></a>oh-my-zsh 去掉history共享</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Add follow line in $ZSH/oh-my-zsh.sh</span><br><span class="line">unsetopt share_history</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里主要记录mac使用中的一些小问题。&lt;/p&gt;
    
    </summary>
    
      <category term="mac" scheme="http://yoursite.com/categories/mac/"/>
    
    
      <category term="mac" scheme="http://yoursite.com/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>使用cProfile分析python性能</title>
    <link href="http://yoursite.com/2019/01/10/cprofile/"/>
    <id>http://yoursite.com/2019/01/10/cprofile/</id>
    <published>2019-01-10T11:17:26.000Z</published>
    <updated>2019-01-10T11:26:44.030Z</updated>
    
    <content type="html"><![CDATA[<p>当我们的确是有需要开始真正优化我们的Python程序的时候，我们要做的第一步并不是盲目的去做优化，而是对我们现有的程序进行分析，发现程序的性能瓶颈进而进行针对性的优化。这样才会使我们花时间和精力去做的优化获得最大的效果。</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们的确是有需要开始真正优化我们的Python程序的时候，我们要做的第一步并不是盲目的去做优化，而是对我们现有的程序进行分析，发现程序的性能瓶颈进而进行针对性的优化。这样才会使我们花时间和精力去做的优化获得最大的效果。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>celery任务超时控制</title>
    <link href="http://yoursite.com/2019/01/10/celery-time-limit/"/>
    <id>http://yoursite.com/2019/01/10/celery-time-limit/</id>
    <published>2019-01-10T08:43:09.000Z</published>
    <updated>2019-01-10T08:58:42.260Z</updated>
    
    <content type="html"><![CDATA[<p>有时候celery任务的执行时间过长，如果没有有效控制可能导致mq消息大量堆积。celery 3.1以后的版本提供了超时机制。</p><a id="more"></a><h1 id="超时设置"><a href="#超时设置" class="headerlink" title="超时设置"></a>超时设置</h1><p>celery 提供了两个参数来控制task超时时间：</p><ul><li>task_time_limit: 在指定时间内没有完成，task会被kill，然后开始下一个task。</li><li>task_soft_time_limit: </li></ul><h2 id="在celery配置文件中使用"><a href="#在celery配置文件中使用" class="headerlink" title="在celery配置文件中使用"></a>在celery配置文件中使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">time_limit = <span class="number">30</span></span><br><span class="line">soft_time_limit = <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="在装饰器中使用"><a href="#在装饰器中使用" class="headerlink" title="在装饰器中使用"></a>在装饰器中使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mytask</span><span class="params">(time_limit=<span class="number">30</span>, soft_time_limit=<span class="number">10</span>)</span>:</span></span><br><span class="line">   do_your_job()</span><br></pre></td></tr></table></figure><h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from celery.exceptions import SoftTimeLimitExceeded</span><br><span class="line"></span><br><span class="line">@app.task</span><br><span class="line">def mytask(soft_time_limit=10):</span><br><span class="line">    try:</span><br><span class="line">        return do_work()</span><br><span class="line">    except SoftTimeLimitExceeded:</span><br><span class="line">        cleanup_in_a_hurry()</span><br></pre></td></tr></table></figure><p>这里实际测试有些情况下仍然捕获不到异常，会直接抛出，出现类似打印：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[2019-01-10 15:42:13,716: ERROR/ForkPoolWorker-11] Pool process &lt;celery.concurrency.asynpool.Worker object at 0x107fddb90&gt; error: SoftTimeLimitExceeded()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;/Library/Python/2.7/site-packages/billiard/pool.py&quot;, line 289, in __call__</span><br><span class="line">    sys.exit(self.workloop(pid=pid))</span><br><span class="line">  File &quot;/Library/Python/2.7/site-packages/billiard/pool.py&quot;, line 347, in workloop</span><br><span class="line">    req = wait_for_job()</span><br><span class="line">  File &quot;/Library/Python/2.7/site-packages/billiard/pool.py&quot;, line 447, in receive</span><br><span class="line">    ready, req = _receive(1.0)</span><br><span class="line">  File &quot;/Library/Python/2.7/site-packages/billiard/pool.py&quot;, line 419, in _recv</span><br><span class="line">    return True, loads(get_payload())</span><br><span class="line">  File &quot;/Library/Python/2.7/site-packages/billiard/queues.py&quot;, line 355, in get_payload</span><br><span class="line">    return self._reader.recv_bytes()</span><br><span class="line">  File &quot;/Library/Python/2.7/site-packages/billiard/connection.py&quot;, line 245, in recv_bytes</span><br><span class="line">    buf = self._recv_bytes(maxlength)</span><br><span class="line">  File &quot;/Library/Python/2.7/site-packages/billiard/connection.py&quot;, line 458, in _recv_bytes</span><br><span class="line">    buf = self._recv(4)</span><br><span class="line">  File &quot;/Library/Python/2.7/site-packages/billiard/connection.py&quot;, line 424, in _recv</span><br><span class="line">    chunk = read(handle, remaining)</span><br><span class="line">  File &quot;/Library/Python/2.7/site-packages/billiard/pool.py&quot;, line 227, in soft_timeout_sighandler</span><br><span class="line">    raise SoftTimeLimitExceeded()</span><br><span class="line">SoftTimeLimitExceeded: SoftTimeLimitExceeded()</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] <a href="http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-task_time_limit" target="_blank" rel="noopener">http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-task_time_limit</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候celery任务的执行时间过长，如果没有有效控制可能导致mq消息大量堆积。celery 3.1以后的版本提供了超时机制。&lt;/p&gt;
    
    </summary>
    
      <category term="mq" scheme="http://yoursite.com/categories/mq/"/>
    
    
      <category term="celery" scheme="http://yoursite.com/tags/celery/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>pyenv使用</title>
    <link href="http://yoursite.com/2019/01/10/pyenv/"/>
    <id>http://yoursite.com/2019/01/10/pyenv/</id>
    <published>2019-01-10T08:09:30.000Z</published>
    <updated>2019-07-22T15:49:01.598Z</updated>
    
    <content type="html"><![CDATA[<p>pyenv可以帮助你在一台开发机上建立多个版本的python环境， 并提供方便的切换方法。<br>virtualenv可以搭建虚拟且独立的python环境，可以使每个项目环境与其他项目独立开来，保持环境的干净，解决包冲突问题。</p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/pyenv/pyenv.git ~/.pyenv</span><br><span class="line">echo 'export PYENV_ROOT="$HOME/.pyenv"' &gt;&gt; ~/.bash_profile</span><br><span class="line">echo 'export PATH="$PYENV_ROOT/bin:$PATH"' &gt;&gt; ~/.bash_profile</span><br><span class="line">echo -e 'if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n  eval "$(pyenv init -)"\nfi' &gt;&gt; ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> restart shell</span></span><br><span class="line">exec "$SHELL"</span><br></pre></td></tr></table></figure><h1 id="安装python-版本"><a href="#安装python-版本" class="headerlink" title="安装python 版本"></a>安装python 版本</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 2.7.10</span><br></pre></td></tr></table></figure><p>如果系统没有安装<code>patch</code>命令，在安装python的时候会报如下错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/.pyenv/plugins/python-build/bin/python-build: line 1326: patch: command not found</span><br></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install patch -y</span><br></pre></td></tr></table></figure><h1 id="pyenv-virtualenv"><a href="#pyenv-virtualenv" class="headerlink" title="pyenv-virtualenv"></a>pyenv-virtualenv</h1><p>光有pyenv还不够，我们需要结合virtualenv来使用, pyenv-virtualenv就是干这个活的。</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv</span><br><span class="line">echo 'eval "$(pyenv virtualenv-init -)"' &gt;&gt; ~/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> restart shell</span></span><br><span class="line">exec "$SHELL"</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建项目</span></span><br><span class="line">pyenv virtualenv 2.7.10 project</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Activate virtualenv</span></span><br><span class="line">pyenv activate project</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Deactive virtualenv</span></span><br><span class="line">pyenv deactivate</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Delete existing virtualenv</span></span><br><span class="line">pyenv uninstall project</span><br></pre></td></tr></table></figure><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><ul><li><p>mac os zlib 问题</p><p>现象如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Last 10 log lines:</span><br><span class="line">  File &quot;/private/var/folders/qq/cxqjcr296h7bvhl4nqbzrsn00000gn/T/python-build.20190419143439.41015/Python-3.5.3/Lib/ensurepip/__main__.py&quot;, line 4, in &lt;module&gt;</span><br><span class="line">    ensurepip._main()</span><br><span class="line">  File &quot;/private/var/folders/qq/cxqjcr296h7bvhl4nqbzrsn00000gn/T/python-build.20190419143439.41015/Python-3.5.3/Lib/ensurepip/__init__.py&quot;, line 209, in _main</span><br><span class="line">    default_pip=args.default_pip,</span><br><span class="line">  File &quot;/private/var/folders/qq/cxqjcr296h7bvhl4nqbzrsn00000gn/T/python-build.20190419143439.41015/Python-3.5.3/Lib/ensurepip/__init__.py&quot;, line 116, in bootstrap</span><br><span class="line">    _run_pip(args + [p[0] for p in _PROJECTS], additional_paths)</span><br><span class="line">  File &quot;/private/var/folders/qq/cxqjcr296h7bvhl4nqbzrsn00000gn/T/python-build.20190419143439.41015/Python-3.5.3/Lib/ensurepip/__init__.py&quot;, line 40, in _run_pip</span><br><span class="line">    import pip</span><br><span class="line">zipimport.ZipImportError: can&apos;t decompress data; zlib not available</span><br></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">brew install zlib</span><br><span class="line"><span class="built_in">export</span> LDFLAGS=<span class="string">"-L/usr/local/opt/zlib/lib"</span></span><br><span class="line"><span class="built_in">export</span> CPPFLAGS=<span class="string">"-I/usr/local/opt/zlib/include"</span></span><br><span class="line">  </span><br><span class="line"><span class="built_in">export</span> PKG_CONFIG_PATH=<span class="string">"/usr/local/opt/zlib/lib/pkgconfig"</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>[1] <a href="https://github.com/pyenv/pyenv#installation" target="_blank" rel="noopener">https://github.com/pyenv/pyenv#installation</a><br>[2] <a href="https://github.com/pyenv/pyenv-virtualenv" target="_blank" rel="noopener">https://github.com/pyenv/pyenv-virtualenv</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pyenv可以帮助你在一台开发机上建立多个版本的python环境， 并提供方便的切换方法。&lt;br&gt;virtualenv可以搭建虚拟且独立的python环境，可以使每个项目环境与其他项目独立开来，保持环境的干净，解决包冲突问题。&lt;/p&gt;
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>celery 启动命令</title>
    <link href="http://yoursite.com/2019/01/09/celery-cmd/"/>
    <id>http://yoursite.com/2019/01/09/celery-cmd/</id>
    <published>2019-01-09T07:54:48.000Z</published>
    <updated>2019-03-08T03:46:56.306Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A tasks worker --loglevel=info</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;co
      
    
    </summary>
    
      <category term="mq" scheme="http://yoursite.com/categories/mq/"/>
    
    
      <category term="celery" scheme="http://yoursite.com/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>celery 介绍</title>
    <link href="http://yoursite.com/2019/01/08/celery-intro/"/>
    <id>http://yoursite.com/2019/01/08/celery-intro/</id>
    <published>2019-01-08T07:54:48.000Z</published>
    <updated>2019-04-01T06:12:38.171Z</updated>
    
    <content type="html"><![CDATA[<p>按照<a href="http://docs.celeryproject.org/en/latest/index.html" target="_blank" rel="noopener">官方说法</a> Celery 是一个简单，灵活可靠的分布式消息处理组件。至于这货性能如何，实际测试才知道。</p><a id="more"></a><h2 id="创建-application"><a href="#创建-application" class="headerlink" title="创建 application"></a>创建 application</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">app = Celery(<span class="string">'tasks'</span>, broker=<span class="string">'pyamqp://guest@localhost//'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure><p>这里的 broker 指定消息中间件的地址，rabbitmq 有多种写法：</p><ul><li>amqp://</li><li>pyamqp://</li><li>librabbitmq://</li></ul><p>如果安装了librabbitmq，则 amqp 使用 librabbitmq，否则使用 py-amqp。当然也可直接指定。librabbitmq是python封装的c库，效率更高。</p><h2 id="启动Celery"><a href="#启动Celery" class="headerlink" title="启动Celery"></a>启动Celery</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A tasks worker --loglevel=info</span><br></pre></td></tr></table></figure><h2 id="调用task"><a href="#调用task" class="headerlink" title="调用task"></a>调用task</h2><p>调用 task 有多种方式，分别是</p><ul><li><p>apply_async(args[, kwargs[, …]])</p><p>发送消息，支持多种参数</p></li><li><p>delay(*args, **kwargs)</p><p>发送消息，不支持执行参数</p></li><li><p><em>calling</em> (<code>__call__</code>)</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> tasks <span class="keyword">import</span> add</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add.delay(<span class="number">4</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><p>调用<code>task</code>会返回一个<code>AsyncResult</code>对象，可以用来获取<code>task</code>是否完成，返回值，异常信息。</p><h2 id="保存结果"><a href="#保存结果" class="headerlink" title="保存结果"></a>保存结果</h2><p>如果需要<code>task</code>的状态，需要通过<code>backend</code>参数设置状态的存放地址，可以是 SQLAlchemy/DjangoORM, Memcached, Redis, RPC(RabbitMQ/AMQP)</p><h3 id="完成状态"><a href="#完成状态" class="headerlink" title="完成状态"></a>完成状态</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = add.delay(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">result.ready()</span><br></pre></td></tr></table></figure><h3 id="释放资源"><a href="#释放资源" class="headerlink" title="释放资源"></a>释放资源</h3><p>每一个<code>AsyncResult</code>都需要显示调用<code>get()</code>,<code>forget()</code>来释放资源。</p><h2 id="celery-配置"><a href="#celery-配置" class="headerlink" title="celery 配置"></a>celery 配置</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;按照&lt;a href=&quot;http://docs.celeryproject.org/en/latest/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方说法&lt;/a&gt; Celery 是一个简单，灵活可靠的分布式消息处理组件。至于这货性能如何，实际测试才知道。&lt;/p&gt;
    
    </summary>
    
      <category term="mq" scheme="http://yoursite.com/categories/mq/"/>
    
    
      <category term="celery" scheme="http://yoursite.com/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>nginx_log</title>
    <link href="http://yoursite.com/2019/01/08/nginx-log/"/>
    <id>http://yoursite.com/2019/01/08/nginx-log/</id>
    <published>2019-01-08T06:51:31.000Z</published>
    <updated>2019-01-08T06:56:35.283Z</updated>
    
    <content type="html"><![CDATA[<p>nginx 日志需要自己进程转储。</p><a id="more"></a><h2 id="crontab-方式"><a href="#crontab-方式" class="headerlink" title="crontab 方式"></a>crontab 方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mv access.log access.log.0</span><br><span class="line">kill -USR1 `cat master.nginx.pid`</span><br><span class="line">sleep 1</span><br><span class="line">gzip access.log.0    # do something with access.log.0</span><br></pre></td></tr></table></figure><p><a href="https://www.nginx.com/resources/wiki/start/topics/examples/logrotation/" target="_blank" rel="noopener">Log Rotation</a></p><h2 id="logrotate"><a href="#logrotate" class="headerlink" title="logrotate"></a>logrotate</h2><p>在 /etc/logrotate.d/nginx 文件中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/var/log/nginx/access/access.log &#123; </span><br><span class="line">rotate 3</span><br><span class="line">size=50G</span><br><span class="line">missingok</span><br><span class="line">notifempty</span><br><span class="line">compress</span><br><span class="line">delaycompress</span><br><span class="line">sharedscripts</span><br><span class="line">    postrotate</span><br><span class="line">    /usr/sbin/nginx -s reload &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">endscript</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nginx 日志需要自己进程转储。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>testtools</title>
    <link href="http://yoursite.com/2018/12/21/testtools/"/>
    <id>http://yoursite.com/2018/12/21/testtools/</id>
    <published>2018-12-21T07:27:25.000Z</published>
    <updated>2018-12-21T07:39:11.365Z</updated>
    
    <content type="html"><![CDATA[<p>testools是属于python中诸多自动化框架中的一个, 是python标准库中unittest的扩展。</p><a id="more"></a><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>更好的assertion method</li><li>更多的调试信息</li><li>扩展自unittest，但是兼容unittest</li><li>支持不同python版本</li></ul><h2 id="assertion"><a href="#assertion" class="headerlink" title="assertion"></a>assertion</h2><ul><li><p>assertRaises</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_square_bad_input</span><span class="params">(self)</span>:</span></span><br><span class="line">  <span class="comment"># 'square' raises a TypeError if it's given bad input, say a</span></span><br><span class="line">  <span class="comment"># string.</span></span><br><span class="line">  e = self.assertRaises(TypeError, silly.square, <span class="string">"orange"</span>)</span><br><span class="line">  self.assertEqual(<span class="string">"orange"</span>, e.bad_value)</span><br><span class="line">  self.assertEqual(<span class="string">"Cannot square 'orange', not a number."</span>, str(e))</span><br></pre></td></tr></table></figure></li><li><p>ExpectedException</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_square_root_bad_input_2</span><span class="params">(self)</span>:</span></span><br><span class="line">  <span class="comment"># 'square' raises a TypeError if it's given bad input.</span></span><br><span class="line">  <span class="keyword">with</span> ExpectedException(TypeError, <span class="string">"Cannot square.*"</span>):</span><br><span class="line">      silly.square(<span class="string">'orange'</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;testools是属于python中诸多自动化框架中的一个, 是python标准库中unittest的扩展。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python mock使用</title>
    <link href="http://yoursite.com/2018/12/20/mock/"/>
    <id>http://yoursite.com/2018/12/20/mock/</id>
    <published>2018-12-20T14:02:28.000Z</published>
    <updated>2019-01-10T08:39:10.662Z</updated>
    
    <content type="html"><![CDATA[<p>在测试中可以使用mock来模拟很多场景，而不需要去真正的执行代码。例如数据库查询，网络请求等。</p><a id="more"></a><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>patching 方法</li><li>记录方法调用情况</li></ul><p>查看方法是否通过正确的参数调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductionClass</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">method</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.something(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">something</span><span class="params">(self, a, b, c)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">real = ProductionClass()</span><br><span class="line">real.something = MagicMock()</span><br><span class="line">real.method()</span><br><span class="line">real.something.assert_called_once_with(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h2 id="Mock类型"><a href="#Mock类型" class="headerlink" title="Mock类型"></a>Mock类型</h2><p>Mock用来创建一个要模拟的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mock.Mock(spec=<span class="keyword">None</span>, side_effect=<span class="keyword">None</span>, return_value=DEFAULT,</span><br><span class="line">          wraps=<span class="keyword">None</span>, name=<span class="keyword">None</span>, spec_set=<span class="keyword">None</span>, unsafe=<span class="keyword">False</span>, **kwargs)</span><br></pre></td></tr></table></figure><ul><li><code>spec:</code> 该参数代表要mock的对象，可以是list, strings, 类或者对象。如果传的是一个对象，会调用<code>dir()</code>,访问dir结果之外的属性都会报<code>AttributeError</code>.如果传的是对象，<code>__class__</code>会返回原来的类型。</li><li><code>return_value:</code> mock对象调用的返回值,默认是Mock对象。</li><li><code>side_effect:</code> 会覆盖<code>return_value</code>的返回值，一般用在抛异常或者动态改变返回值。</li></ul><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><ul><li><p><code>return_value</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mock</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Production</span><span class="params">(ojbect)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_hello</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'hello world'</span> </span><br><span class="line"></span><br><span class="line">m1 = mock.Mock(spec=Production)</span><br><span class="line">m2 = mock.Mock(spec=Production, return_value=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> m1()             <span class="comment"># &lt;Mock name='mock()' id='4443060048'&gt;</span></span><br><span class="line"><span class="keyword">print</span> m2()             <span class="comment"># 1</span></span><br><span class="line"><span class="keyword">print</span> type(m1())       <span class="comment"># &lt;class 'mock.mock.Mock'&gt;</span></span><br><span class="line"><span class="keyword">print</span> type(m2())       <span class="comment"># &lt;type 'int'&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>side_effect</code>的值可以是函数，可迭代对象或者是异常。</p><ul><li>如果传参是函数，则会和mock使用相同的参数并调用。如果函数的返回值是<code>DEFAULT</code>怎使用正常的返回值（return_value指定的），否则返回函数的返回值。</li><li>如果传参是可迭代对象，则每次调用使用迭代器的返回值。</li><li>如果传参是异常，则调用会抛指定异常。</li></ul><p>设置异常:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mock = Mock()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mock.side_effect = Exception(<span class="string">'Boom!'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mock()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">Exception: Boom!</span><br></pre></td></tr></table></figure><p>设置可迭代对象:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mock = Mock()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mock.side_effect = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mock(), mock(), mock()</span><br><span class="line">(<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>设置函数，这里返回<code>DEFAULT</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mock = Mock(return_value=<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">side_effect</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> DEFAULT</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mock.side_effect = side_effect</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mock()</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><p>通过参数指定：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>side_effect = <span class="keyword">lambda</span> value: value + <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mock = Mock(side_effect=side_effect)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mock(<span class="number">3</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mock(<span class="number">-8</span>)</span><br><span class="line"><span class="number">-7</span></span><br></pre></td></tr></table></figure><p>设置为None：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>m = Mock(side_effect=KeyError, return_value=<span class="number">3</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line"> ...</span><br><span class="line">KeyError</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m.side_effect = <span class="keyword">None</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>m()</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul><p>MagicMock是Mock的子类，它实现了大部分的<code>magic method</code>，而不需要你自己去配置。</p><h2 id="patch-装饰器"><a href="#patch-装饰器" class="headerlink" title="patch 装饰器"></a>patch 装饰器</h2><h3 id="mock-patch"><a href="#mock-patch" class="headerlink" title="mock.patch"></a>mock.patch</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mock.patch(target, new=DEFAULT, spec=<span class="keyword">None</span>, create=<span class="keyword">False</span>, spec_set=<span class="keyword">None</span>,</span><br><span class="line">           autospec=<span class="keyword">None</span>, new_callable=<span class="keyword">None</span>, **kwargs)</span><br></pre></td></tr></table></figure><p>patch() 可以作为函数装饰器，类装饰器或上下文管理器。</p><p>如果没有指定<code>new</code>参数，patch对象会使用<code>MagiMock</code>替换。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在测试中可以使用mock来模拟很多场景，而不需要去真正的执行代码。例如数据库查询，网络请求等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
</feed>
