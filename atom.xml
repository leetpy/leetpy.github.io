<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>leesea&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-29T06:36:28.514Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>leesea</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>k8s iptables 规则查看</title>
    <link href="http://yoursite.com/2018/11/29/k8s-iptables/"/>
    <id>http://yoursite.com/2018/11/29/k8s-iptables/</id>
    <published>2018-11-29T03:24:30.000Z</published>
    <updated>2018-11-29T06:36:28.514Z</updated>
    
    <content type="html"><![CDATA[<p>在访问 k8s 服务时，有时会出现一直连不上的问题，我们可以通过分析 iptables 和抓包的方式观察报文是否正确到达。关于 iptable 的介绍可以参考：<a href="../../../../2018/06/29/iptables/">iptables</a></p><a id="more"></a><h2 id="Iptables-跟踪"><a href="#Iptables-跟踪" class="headerlink" title="Iptables 跟踪"></a>Iptables 跟踪</h2><p>设置如下，具体参考[1]:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Load the (IPv4) netfilter log kernel module</span><br><span class="line">modprobe nf_log_ipv4</span><br><span class="line"></span><br><span class="line"># Enable logging for the IPv4 (AF Family 2)</span><br><span class="line">sysctl net.netfilter.nf_log.2=nf_log_ipv4</span><br><span class="line"></span><br><span class="line"># restart rsyslogd</span><br><span class="line">systemctl restart rsyslog</span><br></pre></td></tr></table></figure><p>这里我们以 k8s NodePort 类型的 service 为例，假如我们希望追踪 23741 端口的规则，设置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -t raw -j TRACE -p tcp --dport 32741 -I PREROUTING 1</span><br><span class="line">iptables -t raw -j TRACE -p tcp --dport 32741 -I OUTPUT 1</span><br></pre></td></tr></table></figure><h3 id="查看-var-log-messages-中的追踪记录"><a href="#查看-var-log-messages-中的追踪记录" class="headerlink" title="查看 /var/log/messages 中的追踪记录"></a>查看 <code>/var/log/messages</code> 中的追踪记录</h3><p>为了查看规则，现在某个机器上 curl 一下主机的 32741 端口。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">raw:PREROUTING:policy:2 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000)</span><br><span class="line">nat:PREROUTING:rule:1 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000)</span><br><span class="line">nat:KUBE-SERVICES:rule:9 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000)</span><br><span class="line">nat:KUBE-NODEPORTS:rule:1 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000)</span><br><span class="line">nat:KUBE-MARK-MASQ:rule:1 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000)</span><br><span class="line">nat:KUBE-MARK-MASQ:return:2 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br><span class="line">nat:KUBE-NODEPORTS:rule:2 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br><span class="line">nat:KUBE-SVC-4N57TFCL4MD7ZTDA:rule:1 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br><span class="line">nat:KUBE-SEP-PJQYOXMI5CEBVECW:rule:2 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br><span class="line">filter:FORWARD:rule:1 IN=enp0s3 OUT=cni0 MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.3.4 LEN=64 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=50995 DPT=80 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br><span class="line">filter:KUBE-FORWARD:rule:1 IN=enp0s3 OUT=cni0 MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.3.4 LEN=64 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=50995 DPT=80 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br><span class="line">nat:POSTROUTING:rule:1 IN= OUT=cni0 SRC=192.168.199.132 DST=192.168.3.4 LEN=64 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=50995 DPT=80 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br><span class="line">nat:KUBE-POSTROUTING:rule:1 IN= OUT=cni0 SRC=192.168.199.132 DST=192.168.3.4 LEN=64 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=50995 DPT=80 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br><span class="line">raw:PREROUTING:policy:2 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=52 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343890 ACK=3563071810 WINDOW=4106 RES=0x00 ACK URGP=0 OPT (0101080A08CB9A71008611F0)</span><br></pre></td></tr></table></figure><p>根据上面的图我们知道报文是按照 <code>nat:PREROUTING</code> -&gt; <code>filter:FORWARD</code> -&gt; <code>nat:POSTROUTING</code> 传输的。</p><p>按规则分析，先看第一条：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nat:PREROUTING:rule:1 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000)</span><br></pre></td></tr></table></figure><p>iptables 的 PREROUTING 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Chain PREROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">KUBE-SERVICES  all  --  0.0.0.0/0            0.0.0.0/0            /* kubernetes service portals */</span><br><span class="line">DOCKER     all  --  0.0.0.0/0            0.0.0.0/0            ADDRTYPE match dst-type LOCAL</span><br></pre></td></tr></table></figure><p>可以看出所有报文都会匹配第一条规则，也就是 <code>KUBE-SERVICES</code>, 也就是 trace 里的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nat:KUBE-SERVICES:rule:9 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000)</span><br></pre></td></tr></table></figure><p>再看 iptables 的 KUBE-SERVICES</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Chain KUBE-SERVICES (2 references)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">KUBE-MARK-MASQ  udp  -- !192.168.3.0/24       192.168.2.10         /* kube-system/kube-dns:dns cluster IP */ udp dpt:53</span><br><span class="line">KUBE-SVC-TCOU7JCQXEZGVUNU  udp  --  0.0.0.0/0            192.168.2.10         /* kube-system/kube-dns:dns cluster IP */ udp dpt:53</span><br><span class="line">KUBE-MARK-MASQ  tcp  -- !192.168.3.0/24       192.168.2.10         /* kube-system/kube-dns:dns-tcp cluster IP */ tcp dpt:53</span><br><span class="line">KUBE-SVC-ERIFXISQEP7F7OF4  tcp  --  0.0.0.0/0            192.168.2.10         /* kube-system/kube-dns:dns-tcp cluster IP */ tcp dpt:53</span><br><span class="line">KUBE-MARK-MASQ  tcp  -- !192.168.3.0/24       192.168.2.1          /* default/kubernetes:https cluster IP */ tcp dpt:443</span><br><span class="line">KUBE-SVC-NPX46M4PTMTKRN6Y  tcp  --  0.0.0.0/0            192.168.2.1          /* default/kubernetes:https cluster IP */ tcp dpt:443</span><br><span class="line">KUBE-MARK-MASQ  tcp  -- !192.168.3.0/24       192.168.2.125        /* default/nginx: cluster IP */ tcp dpt:80</span><br><span class="line">KUBE-SVC-4N57TFCL4MD7ZTDA  tcp  --  0.0.0.0/0            192.168.2.125        /* default/nginx: cluster IP */ tcp dpt:80</span><br><span class="line">KUBE-NODEPORTS  all  --  0.0.0.0/0            0.0.0.0/0            /* kubernetes service nodeports; NOTE: this must be the last rule in this chain */ ADDRTYPE match dst-type LOCAL</span><br></pre></td></tr></table></figure><p>很明显匹配的是 <code>KUBE-NODEPORTS</code>, 也就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRACE: nat:KUBE-NODEPORTS:rule:1 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000)</span><br></pre></td></tr></table></figure><p>iptables 的 KUBE-NODEPORTS 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Chain KUBE-NODEPORTS (1 references)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">KUBE-MARK-MASQ  tcp  --  0.0.0.0/0            0.0.0.0/0            /* default/nginx: */ tcp dpt:32741</span><br><span class="line">KUBE-SVC-4N57TFCL4MD7ZTDA  tcp  --  0.0.0.0/0            0.0.0.0/0            /* default/nginx: */ tcp dpt:32741</span><br></pre></td></tr></table></figure><p>先走第一个条 <code>KUBE-MARK-MASQ</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRACE: nat:KUBE-MARK-MASQ:rule:1 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000)</span><br></pre></td></tr></table></figure><p>iptables 的 KUBE-MARK-MASQ 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Chain KUBE-MARK-MASQ (11 references)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">MARK       all  --  0.0.0.0/0            0.0.0.0/0            MARK or 0x4000</span><br></pre></td></tr></table></figure><p>k8s 会给报文打上 <code>0x4000</code> 的标签, 打完标签后会返回，然后继续匹配 <code>KUBE-NODEPORTS</code> 的下一条规则。也就是 <code>KUBE-SVC-4N57TFCL4MD7ZTDA</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TRACE: nat:KUBE-MARK-MASQ:return:2 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br><span class="line"></span><br><span class="line">TRACE: nat:KUBE-NODEPORTS:rule:2 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br><span class="line"></span><br><span class="line">TRACE: nat:KUBE-SVC-4N57TFCL4MD7ZTDA:rule:1 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br></pre></td></tr></table></figure><p>iptables 的 KUBE-SVC-4N57TFCL4MD7ZTDA 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Chain KUBE-SVC-4N57TFCL4MD7ZTDA (2 references)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">KUBE-SEP-PJQYOXMI5CEBVECW  all  --  0.0.0.0/0            0.0.0.0/0</span><br></pre></td></tr></table></figure><p>进入 KUBE-SEP-PJQYOXMI5CEBVECW</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRACE: nat:KUBE-SEP-PJQYOXMI5CEBVECW:rule:2 IN=enp0s3 OUT= MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.199.119 LEN=64 TOS=0x00 PREC=0x00 TTL=64 ID=0 DF PROTO=TCP SPT=50995 DPT=32741 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br></pre></td></tr></table></figure><p>iptables 的 KUBE-SEP-PJQYOXMI5CEBVECW 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Chain KUBE-SEP-PJQYOXMI5CEBVECW (1 references)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">KUBE-MARK-MASQ  all  --  192.168.3.4          0.0.0.0/0</span><br><span class="line">DNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp to:192.168.3.4:80</span><br></pre></td></tr></table></figure><p>可以看到这里走的是 DNAT, 将报文中的目的地址换成了 <code>92.168.3.4:80</code>, 也就是 k8s 服务对应 pod 的 ip 和端口号。</p><p>DNAT 完了之后会将报文发给 filter 表的 FORWARD 链。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRACE: filter:FORWARD:rule:1 IN=enp0s3 OUT=cni0 MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.3.4 LEN=64 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=50995 DPT=80 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br></pre></td></tr></table></figure><p>iptables 的 FORWARD 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Chain FORWARD (policy DROP)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">KUBE-FORWARD  all  --  0.0.0.0/0            0.0.0.0/0            /* kubernetes forwarding rules */</span><br><span class="line">DOCKER-ISOLATION  all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">DOCKER     all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED</span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">ACCEPT     all  --  192.168.3.0/24       0.0.0.0/0</span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            192.168.3.0/24</span><br></pre></td></tr></table></figure><p>可以看到匹配第一条，进入 KUBE-FORWARD</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRACE: filter:KUBE-FORWARD:rule:1 IN=enp0s3 OUT=cni0 MAC=08:00:27:63:c4:b1:f0:18:98:36:f6:c4:08:00 SRC=192.168.199.132 DST=192.168.3.4 LEN=64 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=50995 DPT=80 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br></pre></td></tr></table></figure><p>iptables 的 KUBE-FORWARD 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Chain KUBE-FORWARD (1 references)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            0.0.0.0/0            /* kubernetes forwarding rules */ mark match 0x4000/0x4000</span><br><span class="line">ACCEPT     all  --  192.168.3.0/24       0.0.0.0/0            /* kubernetes forwarding conntrack pod source rule */ ctstate RELATED,ESTABLISHED</span><br><span class="line">ACCEPT     all  --  0.0.0.0/0            192.168.3.0/24       /* kubernetes forwarding conntrack pod destination rule */ ctstate RELATED,ESTABLISHED</span><br></pre></td></tr></table></figure><p>forward 完了之后会转给 iptables 的 nat 表的 POSTROUTING:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRACE: nat:POSTROUTING:rule:1 IN= OUT=cni0 SRC=192.168.199.132 DST=192.168.3.4 LEN=64 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=50995 DPT=80 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br></pre></td></tr></table></figure><p>iptables 的 POSTROUTING 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Chain POSTROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">KUBE-POSTROUTING  all  --  0.0.0.0/0            0.0.0.0/0            /* kubernetes postrouting rules */</span><br><span class="line">MASQUERADE  all  --  172.17.0.0/16        0.0.0.0/0</span><br><span class="line">RETURN     all  --  192.168.3.0/24       192.168.3.0/24</span><br><span class="line">MASQUERADE  all  --  192.168.3.0/24      !224.0.0.0/4</span><br><span class="line">RETURN     all  -- !192.168.3.0/24       192.168.3.0/24</span><br><span class="line">MASQUERADE  all  -- !192.168.3.0/24       192.168.3.0/24</span><br></pre></td></tr></table></figure><p>命中第一条，转给 KUBE-POSTROUTING</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TRACE: nat:KUBE-POSTROUTING:rule:1 IN= OUT=cni0 SRC=192.168.199.132 DST=192.168.3.4 LEN=64 TOS=0x00 PREC=0x00 TTL=63 ID=0 DF PROTO=TCP SPT=50995 DPT=80 SEQ=1677343889 ACK=0 WINDOW=65535 RES=0x00 SYN URGP=0 OPT (020405B4010303050101080A08CB9A710000000004020000) MARK=0x4000</span><br></pre></td></tr></table></figure><p>iptables 的 KUBE-POSTROUTING 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Chain KUBE-POSTROUTING (1 references)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">MASQUERADE  all  --  0.0.0.0/0            0.0.0.0/0            /* kubernetes service traffic requiring SNAT */ mark match 0x4000/0x4000</span><br></pre></td></tr></table></figure><p>汇总一下，大概路线如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">--&gt; [nat]PREROUTING</span><br><span class="line">            |</span><br><span class="line">            |</span><br><span class="line">            V</span><br><span class="line">    [nat]KUBE-SERVICES</span><br><span class="line">            |</span><br><span class="line">            |</span><br><span class="line">            V</span><br><span class="line">    [nat]KUBE-NODEPORTS</span><br><span class="line">            |</span><br><span class="line">            |</span><br><span class="line">            V</span><br><span class="line">    [nat]KUBE-MARK-MASQ (打0x4000的标签)</span><br><span class="line">            |</span><br><span class="line">            |</span><br><span class="line">            V</span><br><span class="line">    [nat]KUBE-NODEPORTS</span><br><span class="line">            |</span><br><span class="line">            |</span><br><span class="line">            V               </span><br><span class="line">    [nat]KUBE-SVC-4N57TFCL4MD7ZTDA               [filter]KUBE-FORWARD -----&gt; [nat]POSTROUTING</span><br><span class="line">            |                                              ^                          |</span><br><span class="line">            |                                              |                          |</span><br><span class="line">            V                                              |                          V</span><br><span class="line">    [nat]KUBE-SEP-PJQYOXMI5CEBVECW  ------------&gt;[filter]FORWARD            [nat]KUBE-POSTROUTING</span><br><span class="line">(DNAT, 替换DST和DPT, 将物理机地址换成pod地址)</span><br></pre></td></tr></table></figure><h3 id="清除追踪规则"><a href="#清除追踪规则" class="headerlink" title="清除追踪规则"></a>清除追踪规则</h3><ul><li><p>查看规则 number</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo iptables -t raw -nL --line-number</span><br><span class="line">Chain PREROUTING (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination</span><br><span class="line">1    TRACE      tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:32741</span><br><span class="line"></span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">num  target     prot opt source               destination</span><br><span class="line">1    TRACE      tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:32741</span><br></pre></td></tr></table></figure></li><li><p>删除规则<br>上面查到的 number 是 <code>1</code>, 这里删除第一条规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo iptables -t raw -D PREROUTING 1</span><br><span class="line">$ sudo iptables -t raw -D OUTPUT 1</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] <a href="http://www.opensourcerers.org/how-to-trace-iptables-in-rhel7-centos7/" target="_blank" rel="noopener">How to trace IPTables</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在访问 k8s 服务时，有时会出现一直连不上的问题，我们可以通过分析 iptables 和抓包的方式观察报文是否正确到达。关于 iptable 的介绍可以参考：&lt;a href=&quot;../../../../2018/06/29/iptables/&quot;&gt;iptables&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PaaS" scheme="http://yoursite.com/categories/PaaS/"/>
    
    
      <category term="k8s" scheme="http://yoursite.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s学习之job</title>
    <link href="http://yoursite.com/2018/11/21/k8s-job/"/>
    <id>http://yoursite.com/2018/11/21/k8s-job/</id>
    <published>2018-11-21T01:56:45.000Z</published>
    <updated>2018-11-25T06:48:43.027Z</updated>
    
    <content type="html"><![CDATA[<p>Kubernetes 有两种类型的 job, 分别是 <code>Job</code> 和 <code>CronJonb</code>。</p><ul><li>Job: 负责批量处理短暂的一次性任务，仅执行一次，并保证处理的一个或者多个Pod成功结束。</li><li>CronJob: 负责定时任务，在指定的时间周期运行指定的任务。</li></ul><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kubernetes 有两种类型的 job, 分别是 &lt;code&gt;Job&lt;/code&gt; 和 &lt;code&gt;CronJonb&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Job: 负责批量处理短暂的一次性任务，仅执行一次，并保证处理的一个或者多个Pod成功结束。&lt;/li&gt;
&lt;li&gt;CronJob: 负责定时任务，在指定的时间周期运行指定的任务。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="PaaS" scheme="http://yoursite.com/categories/PaaS/"/>
    
    
      <category term="k8s" scheme="http://yoursite.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s学习之configmap</title>
    <link href="http://yoursite.com/2018/11/21/k8s-configmap/"/>
    <id>http://yoursite.com/2018/11/21/k8s-configmap/</id>
    <published>2018-11-21T01:56:37.000Z</published>
    <updated>2018-11-21T09:08:17.705Z</updated>
    
    <content type="html"><![CDATA[<p>很多生产环境中的应用程序较为复杂，可能需要多个 config 文件，命令行参数和环境变量的组合。并且这些配置信息应该从镜像中解耦出来，以保证镜像的可移植性以及配置信息不被泄漏。社区使用 ConfigMap 满足这一需求。</p><p>ConfigMap 包含了一系列键值对，用于存储被 pod 或者系统组件（如 controller 等）访问的信息。</p><a id="more"></a><h2 id="configmap-模板"><a href="#configmap-模板" class="headerlink" title="configmap 模板"></a>configmap 模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: 2018-11-21T09:56:37</span><br><span class="line">  name: example-conifg</span><br><span class="line">  namespace: default</span><br><span class="line">data:</span><br><span class="line">  example.property.1: hello</span><br><span class="line">  example.property.2: world</span><br><span class="line">  example.property.file: |-</span><br><span class="line">    property.1=value-1</span><br><span class="line">    property.2=value-2</span><br><span class="line">    property.3=value-3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多生产环境中的应用程序较为复杂，可能需要多个 config 文件，命令行参数和环境变量的组合。并且这些配置信息应该从镜像中解耦出来，以保证镜像的可移植性以及配置信息不被泄漏。社区使用 ConfigMap 满足这一需求。&lt;/p&gt;
&lt;p&gt;ConfigMap 包含了一系列键值对，用于存储被 pod 或者系统组件（如 controller 等）访问的信息。&lt;/p&gt;
    
    </summary>
    
      <category term="PaaS" scheme="http://yoursite.com/categories/PaaS/"/>
    
    
      <category term="k8s" scheme="http://yoursite.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s学习之daemonset</title>
    <link href="http://yoursite.com/2018/11/21/k8s-daemonset/"/>
    <id>http://yoursite.com/2018/11/21/k8s-daemonset/</id>
    <published>2018-11-21T01:56:27.000Z</published>
    <updated>2018-11-21T02:51:47.556Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="PaaS" scheme="http://yoursite.com/categories/PaaS/"/>
    
    
      <category term="k8s" scheme="http://yoursite.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s学习之deployment</title>
    <link href="http://yoursite.com/2018/11/21/k8s-deployment/"/>
    <id>http://yoursite.com/2018/11/21/k8s-deployment/</id>
    <published>2018-11-21T01:56:12.000Z</published>
    <updated>2018-11-21T08:57:55.901Z</updated>
    
    <content type="html"><![CDATA[<p>Deployment 多用于为 pod 和 replia set 提供更新，并且可以方便地跟踪观察其所属的 replica set 或者 pod 数量以及状态的变化。</p><a id="more"></a><h2 id="Node-调度"><a href="#Node-调度" class="headerlink" title="Node 调度"></a>Node 调度</h2><p>有时候我们希望 pod 运行在指定的一个或者一批 node 上。可以通过 node 的名字或者 label 来完成。</p><h2 id="NodeName"><a href="#NodeName" class="headerlink" title="NodeName"></a>NodeName</h2><p>Pod.spec.nodeName用于强制约束将Pod调度到指定的Node节点上，这里说是“调度”，但其实指定了nodeName的Pod会直接跳过Scheduler的调度逻辑，直接写入PodList列表，该匹配规则是强制匹配。</p><p>eg:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: my-deploy</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: my-app</span><br><span class="line">    spec:</span><br><span class="line">      nodeName: master # 指定调度到master节点</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure><h3 id="NodeSelector"><a href="#NodeSelector" class="headerlink" title="NodeSelector"></a>NodeSelector</h3><ul><li>Pod.spec.nodeSelector是通过kubernetes的label-selector机制进行节点选择，由scheduler调度策略</li><li>MatchNodeSelector进行label匹配，调度pod到目标节点，该匹配规则是强制约束。</li></ul><h4 id="查看节点-label"><a href="#查看节点-label" class="headerlink" title="查看节点 label"></a>查看节点 label</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes --show-labels</span><br></pre></td></tr></table></figure><h4 id="添加-label"><a href="#添加-label" class="headerlink" title="添加 label"></a>添加 label</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl label nodes &lt;node_name&gt; &lt;key&gt;=&lt;value&gt;</span><br><span class="line"></span><br><span class="line"># eg:</span><br><span class="line">kubectl label nodes master region=shanghai</span><br></pre></td></tr></table></figure><h4 id="pod-中指定-label"><a href="#pod-中指定-label" class="headerlink" title="pod 中指定 label"></a>pod 中指定 label</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: my-deploy</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: my-app</span><br><span class="line">    spec:</span><br><span class="line">      nodeSelector:</span><br><span class="line">        region: shanghai # 指定调度到上海的节点</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: nginx</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Deployment 多用于为 pod 和 replia set 提供更新，并且可以方便地跟踪观察其所属的 replica set 或者 pod 数量以及状态的变化。&lt;/p&gt;
    
    </summary>
    
      <category term="PaaS" scheme="http://yoursite.com/categories/PaaS/"/>
    
    
      <category term="k8s" scheme="http://yoursite.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s学习之rs</title>
    <link href="http://yoursite.com/2018/11/21/k8s-rs/"/>
    <id>http://yoursite.com/2018/11/21/k8s-rs/</id>
    <published>2018-11-21T01:56:06.000Z</published>
    <updated>2018-11-21T02:51:35.114Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="PaaS" scheme="http://yoursite.com/categories/PaaS/"/>
    
    
      <category term="k8s" scheme="http://yoursite.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s学习之rc</title>
    <link href="http://yoursite.com/2018/11/21/k8s-rc/"/>
    <id>http://yoursite.com/2018/11/21/k8s-rc/</id>
    <published>2018-11-21T01:55:57.000Z</published>
    <updated>2018-11-21T02:51:38.495Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="PaaS" scheme="http://yoursite.com/categories/PaaS/"/>
    
    
      <category term="k8s" scheme="http://yoursite.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s学习之service</title>
    <link href="http://yoursite.com/2018/11/20/k8s-service/"/>
    <id>http://yoursite.com/2018/11/20/k8s-service/</id>
    <published>2018-11-20T12:52:38.000Z</published>
    <updated>2018-11-21T02:57:19.294Z</updated>
    
    <content type="html"><![CDATA[<p>由于重新调度等原因，pod 在 kubernetes 中的 IP 地址不是固定的，因此需要一个代理来确保使用 pod 的应用不需要知晓 pod 的真实 IP 地址。另一个原因是当使用 replication controller 创建了多个 pod 副本时，需要一个代理来为这些 pod 做负载均衡。</p><p>service 主要由一个 IP 地址和 label selector 构成。在创建之初，每个 service 便被分配了一个独一无二的 IP 地址，该 IP 地址与 service 的生命周期相同，且不再更改。</p><a id="more"></a><h2 id="service-工作原理"><a href="#service-工作原理" class="headerlink" title="service 工作原理"></a>service 工作原理</h2><h3 id="userspace-模式"><a href="#userspace-模式" class="headerlink" title="userspace 模式"></a>userspace 模式</h3><h3 id="iptables-模式"><a href="#iptables-模式" class="headerlink" title="iptables 模式"></a>iptables 模式</h3><h2 id="service-的自发现"><a href="#service-的自发现" class="headerlink" title="service 的自发现"></a>service 的自发现</h2><h3 id="环境变量方式"><a href="#环境变量方式" class="headerlink" title="环境变量方式"></a>环境变量方式</h3><p>环境变量的注入只发生在 pod 创建时，且不会被自动更新。</p><h3 id="DNS-方式"><a href="#DNS-方式" class="headerlink" title="DNS 方式"></a>DNS 方式</h3><h4 id="DNS-缓存问题会导致如下两种不可靠情况"><a href="#DNS-缓存问题会导致如下两种不可靠情况" class="headerlink" title="DNS 缓存问题会导致如下两种不可靠情况"></a>DNS 缓存问题会导致如下两种不可靠情况</h4><ul><li>DNS 函数库对 DNS TTL 支持不良问题由来已久。</li><li>即使应用程序和 DNS 服务器能够进行恰当的域名重解析操作，每个客户端频繁的域名重解析请求将给系统带来极大的负荷。</li></ul><h2 id="service-外部路由"><a href="#service-外部路由" class="headerlink" title="service 外部路由"></a>service 外部路由</h2><p>service 通常分为三种类型，分别为 ClusterIP, NodePort 和 Loadbalancer。其中 ClusterIP 是最基本的类型，在默认情况下只能在集群内部访问。</p><h3 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h3><h3 id="Loadbalancer"><a href="#Loadbalancer" class="headerlink" title="Loadbalancer"></a>Loadbalancer</h3><p>Loadbalancer 类型的 service 并不是由 kubernetes 集群维护的，需要云服务提供商的支持。如何将外部 loadbalancer 接入的流量导到后端 pod，取决于具体云服务提供商的实现。</p><h3 id="external-ip"><a href="#external-ip" class="headerlink" title="external ip"></a>external ip</h3><h2 id="service-模板"><a href="#service-模板" class="headerlink" title="service 模板"></a>service 模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: app</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    app: app</span><br><span class="line">  type: NodePort</span><br><span class="line">  ports:</span><br><span class="line">  - protocol: TCP</span><br><span class="line">    port: 5000</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于重新调度等原因，pod 在 kubernetes 中的 IP 地址不是固定的，因此需要一个代理来确保使用 pod 的应用不需要知晓 pod 的真实 IP 地址。另一个原因是当使用 replication controller 创建了多个 pod 副本时，需要一个代理来为这些 pod 做负载均衡。&lt;/p&gt;
&lt;p&gt;service 主要由一个 IP 地址和 label selector 构成。在创建之初，每个 service 便被分配了一个独一无二的 IP 地址，该 IP 地址与 service 的生命周期相同，且不再更改。&lt;/p&gt;
    
    </summary>
    
      <category term="PaaS" scheme="http://yoursite.com/categories/PaaS/"/>
    
    
      <category term="k8s" scheme="http://yoursite.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s学习之pod</title>
    <link href="http://yoursite.com/2018/11/20/k8s-pod/"/>
    <id>http://yoursite.com/2018/11/20/k8s-pod/</id>
    <published>2018-11-20T12:52:00.000Z</published>
    <updated>2018-11-21T02:49:48.691Z</updated>
    
    <content type="html"><![CDATA[<p>在 Kubernetes 中，能够被创建，调度和管理的最小单元是 pod, 而非单个容器。一个 pod 是由若干个 Docker 容器构成的容器组（pod意为豆荚）。</p><a id="more"></a><p>pod里的容器共享 network namespace, 并通过 volume 机制共享一部分存储。</p><p>pod里的容器共享如下资源：</p><ul><li>pod 是IP等网络资源分配的基本单位，这个IP及network namespace是由pod里的容器共享的。</li><li>pod内的所有容器也共享volume。</li><li>IPC namespace</li><li>UTS namespace</li></ul><h2 id="label"><a href="#label" class="headerlink" title="label"></a>label</h2><p>每个pod都有一个属性<code>labels</code> – 一组键值对，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;labels&quot;: &#123;</span><br><span class="line">    &quot;key1&quot;: &quot;value1&quot;,</span><br><span class="line">    &quot;key2&quot;: &quot;value2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相等查询"><a href="#相等查询" class="headerlink" title="相等查询"></a>相等查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">environment = production</span><br><span class="line">tier != frontend</span><br></pre></td></tr></table></figure><h3 id="子集查询"><a href="#子集查询" class="headerlink" title="子集查询"></a>子集查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">environment in (production, qa)</span><br><span class="line">tier notin (frontend, backend)</span><br><span class="line">partition</span><br></pre></td></tr></table></figure><h2 id="pod-模板"><a href="#pod-模板" class="headerlink" title="pod 模板"></a>pod 模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: busybox</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: busybox</span><br><span class="line">    image: busybox</span><br><span class="line">    command:</span><br><span class="line">      - sleep</span><br><span class="line">      - &quot;36000&quot;</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">  restartPolicy: Always</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="根据-label-获取-pod"><a href="#根据-label-获取-pod" class="headerlink" title="根据 label 获取 pod"></a>根据 label 获取 pod</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -l name=nginx</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Kubernetes 中，能够被创建，调度和管理的最小单元是 pod, 而非单个容器。一个 pod 是由若干个 Docker 容器构成的容器组（pod意为豆荚）。&lt;/p&gt;
    
    </summary>
    
      <category term="PaaS" scheme="http://yoursite.com/categories/PaaS/"/>
    
    
      <category term="k8s" scheme="http://yoursite.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>kubeadm 安装 k8s</title>
    <link href="http://yoursite.com/2018/11/20/k8s-install/"/>
    <id>http://yoursite.com/2018/11/20/k8s-install/</id>
    <published>2018-11-20T09:58:18.000Z</published>
    <updated>2018-11-30T01:40:32.968Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍使用 kubeadm 安装 k8s 集群。建议不要用在生产环境。使用 kubeadm 安装，如果 master 节点挂了，是没有办法操作的。</p><p>安装版本：</p><ul><li>k8s: 1.12.2</li><li>docker: 17.3.2</li></ul><a id="more"></a><h2 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 关闭 firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line">systemctl stop firewalld</span><br><span class="line"></span><br><span class="line"># 关闭 selinux</span><br><span class="line">setenforce 0</span><br><span class="line">sed -i &quot;s/^SELINUX=enforcing/SELINUX=disabled/g&quot; /etc/selinux/config</span><br></pre></td></tr></table></figure><h2 id="内核参数配置"><a href="#内核参数配置" class="headerlink" title="内核参数配置"></a>内核参数配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/bridge/bridge-nf-call-iptables</span><br></pre></td></tr></table></figure><h2 id="hosts-配置"><a href="#hosts-配置" class="headerlink" title="hosts 配置"></a>hosts 配置</h2><p>在 <code>/etc/hosts</code> 文件中配置集群的主机，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.2master</span><br><span class="line">192.168.1.3node1</span><br><span class="line">192.168.1.4node2</span><br></pre></td></tr></table></figure><h2 id="yum-源配置"><a href="#yum-源配置" class="headerlink" title="yum 源配置"></a>yum 源配置</h2><h3 id="添加-docker-源"><a href="#添加-docker-源" class="headerlink" title="添加 docker 源"></a>添加 docker 源</h3><p>CentOS 默认源的docker版本比较低，很多特性不支持，另外k8s对docker版本有要求，这里我们配置 <code>docker-ce</code> 源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="添加-k8s-源"><a href="#添加-k8s-源" class="headerlink" title="添加 k8s 源"></a>添加 k8s 源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">       http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h2><p>由于 k8s 对 docker 版本有要求，最新的 docker 版本不一定支持，这里安装指定版本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 查看可用版本</span><br><span class="line">yum list docker-ce --showduplicates</span><br><span class="line"></span><br><span class="line">yum install -y --setopt=obsoletes=0 \</span><br><span class="line">   docker-ce-17.03.2.ce-1.el7.centos.x86_64 \</span><br><span class="line">   docker-ce-selinux-17.03.2.ce-1.el7.centos.noarch</span><br><span class="line"></span><br><span class="line">systemctl enable docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h2 id="安装-kubeadm-和-kubectl"><a href="#安装-kubeadm-和-kubectl" class="headerlink" title="安装 kubeadm 和 kubectl"></a>安装 kubeadm 和 kubectl</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y kubeadm kubectl</span><br><span class="line"></span><br><span class="line">systemctl enable kubelet</span><br></pre></td></tr></table></figure><h2 id="下载-k8s-镜像"><a href="#下载-k8s-镜像" class="headerlink" title="下载 k8s 镜像"></a>下载 k8s 镜像</h2><p>由于网络原因，kubeadm 需要的镜像无法下载，这里我们使用别人的代理下载。</p><h3 id="查看所需-docker-镜像"><a href="#查看所需-docker-镜像" class="headerlink" title="查看所需 docker 镜像"></a>查看所需 docker 镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 这个命令仅使用 v1.10 以上</span><br><span class="line">kubeadm config images list</span><br></pre></td></tr></table></figure><p>添加 <code>pullimages.sh</code> 脚本, 并执行， 脚本内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">images=(</span><br><span class="line">    kube-apiserver:v1.12.2</span><br><span class="line">    kube-controller-manager:v1.12.2</span><br><span class="line">    kube-scheduler:v1.12.2</span><br><span class="line">    kube-proxy:v1.12.2</span><br><span class="line">    pause:3.1</span><br><span class="line">    etcd:3.2.24</span><br><span class="line">    coredns:1.2.2</span><br><span class="line">)</span><br><span class="line">for imageName in $&#123;images[@]&#125; ; do</span><br><span class="line">    docker pull anjia0532/google-containers.$imageName</span><br><span class="line">    docker tag anjia0532/google-containers.$imageName k8s.gcr.io/$imageName</span><br><span class="line">    docker rmi anjia0532/google-containers.$imageName</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="初始化集群"><a href="#初始化集群" class="headerlink" title="初始化集群"></a>初始化集群</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">  --kubernetes-version=v1.12.2 \</span><br><span class="line">  --pod-network-cidr=192.168.3.0/24 \</span><br><span class="line">      --service-cidr=192.168.2.0/24</span><br></pre></td></tr></table></figure><h2 id="master-参与调度"><a href="#master-参与调度" class="headerlink" title="master 参与调度"></a>master 参与调度</h2><p>默认情况下集群不会调度 pod 到 master 节点，可以执行如下命令来控制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br></pre></td></tr></table></figure><h2 id="命令补全"><a href="#命令补全" class="headerlink" title="命令补全"></a>命令补全</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y bash-completion</span><br><span class="line">source /usr/share/bash-completion/bash_completion</span><br><span class="line">source &lt;(kubectl completion bash)</span><br><span class="line">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="servcie-端口范围修改"><a href="#servcie-端口范围修改" class="headerlink" title="servcie 端口范围修改"></a>servcie 端口范围修改</h2><p>k8s service 默认的端口范围是 30000-32767, 如果想修改端口范围，进行如下操作：</p><ol><li>修改 /etc/kubernetes/manifests/kube-apiserver.yaml，添加： <code>--service-node-port-range=80-32767</code></li><li>systemctl restart kubelet.service</li></ol><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="Dns-loop-detected"><a href="#Dns-loop-detected" class="headerlink" title="Dns loop detected"></a>Dns loop detected</h3><ul><li><p>编辑 configmap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system edit configmap coredns</span><br></pre></td></tr></table></figure></li><li><p>注释掉 loop</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">data:</span><br><span class="line">  Corefile: |</span><br><span class="line">    .:53 &#123;</span><br><span class="line">        errors</span><br><span class="line">        health</span><br><span class="line">        kubernetes cluster.local in-addr.arpa ip6.arpa &#123;</span><br><span class="line">           pods insecure</span><br><span class="line">           upstream</span><br><span class="line">           fallthrough in-addr.arpa ip6.arpa</span><br><span class="line">        &#125;</span><br><span class="line">        prometheus :9153</span><br><span class="line">        proxy . /etc/resolv.conf</span><br><span class="line">        cache 30</span><br><span class="line">        #loop</span><br><span class="line">        reload</span><br><span class="line">        loadbalance</span><br><span class="line">    &#125;</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: 2018-11-20T03:08:28Z</span><br><span class="line">  name: coredns</span><br></pre></td></tr></table></figure></li></ul><h3 id="token-过期"><a href="#token-过期" class="headerlink" title="token 过期"></a>token 过期</h3><p>token 默认有效期是 24h, 如果 token 过期了，创建新 token 再加入集群：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm token create</span><br></pre></td></tr></table></figure><h3 id="其它节点-pod-cidr-问题"><a href="#其它节点-pod-cidr-问题" class="headerlink" title="其它节点 pod cidr 问题"></a>其它节点 pod cidr 问题</h3><ul><li>查看节点是否设置了 pod cide<br><code>kubectl get nodes -o jsonpath=&#39;{.items[*].spec.podCIDR}&#39;</code></li><li>如果没有设置，设置节点的 pod CIDR<br><code>kubectl patch node &lt;NODE_NAME&gt; -p &#39;{&quot;spec&quot;:{&quot;podCIDR&quot;:&quot;&lt;SUBNET&gt;&quot;}}&#39;</code></li></ul><p>参考： <a href="https://github.com/coreos/flannel/blob/master/Documentation/troubleshooting.md#kubernetes-specific" target="_blank" rel="noopener">flannel  Troubleshooting</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍使用 kubeadm 安装 k8s 集群。建议不要用在生产环境。使用 kubeadm 安装，如果 master 节点挂了，是没有办法操作的。&lt;/p&gt;
&lt;p&gt;安装版本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;k8s: 1.12.2&lt;/li&gt;
&lt;li&gt;docker: 17.3.2&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="PaaS" scheme="http://yoursite.com/categories/PaaS/"/>
    
    
      <category term="k8s" scheme="http://yoursite.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>docker 三剑客</title>
    <link href="http://yoursite.com/2018/11/18/docker-scm/"/>
    <id>http://yoursite.com/2018/11/18/docker-scm/</id>
    <published>2018-11-18T03:27:04.000Z</published>
    <updated>2018-11-22T06:56:28.899Z</updated>
    
    <content type="html"><![CDATA[<p>docker 三剑客主要用于容器的编排。</p><a id="more"></a><h1 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h1><p>docker service create –replicas 2 –name hello app</p><h1 id="服务规模调整"><a href="#服务规模调整" class="headerlink" title="服务规模调整"></a>服务规模调整</h1><p>docker service scale hello=3<br>docker stack deploy -c docker-compose.yml hello</p><h1 id="关闭服务"><a href="#关闭服务" class="headerlink" title="关闭服务"></a>关闭服务</h1><p>docker stack rm hello</p><h1 id="滚动更新"><a href="#滚动更新" class="headerlink" title="滚动更新"></a>滚动更新</h1><p>task 概念</p><h1 id="离开集群"><a href="#离开集群" class="headerlink" title="离开集群"></a>离开集群</h1><p>docker swarm leave –force</p><h1 id="容器运行节点"><a href="#容器运行节点" class="headerlink" title="容器运行节点"></a>容器运行节点</h1><p>docker stack ps</p><p>volume + bind mounts</p><h1 id="设置节点状态"><a href="#设置节点状态" class="headerlink" title="设置节点状态"></a>设置节点状态</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 禁用</span><br><span class="line">docker node update --availability drain work1</span><br><span class="line"># 启用</span><br><span class="line">docker node update --availability active worker1</span><br></pre></td></tr></table></figure><h1 id="查看-Token"><a href="#查看-Token" class="headerlink" title="查看 Token"></a>查看 Token</h1><p>docker swarm join-token worker/manager</p><h1 id="docker-config-配置"><a href="#docker-config-配置" class="headerlink" title="docker config 配置"></a>docker config 配置</h1><p>docker network create –attachable –driver overlay oneta</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line">networks:</span><br><span class="line">  mynet:</span><br><span class="line">    driver: overlay</span><br><span class="line">    attachable: true</span><br><span class="line">services:</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker 三剑客主要用于容器的编排。&lt;/p&gt;
    
    </summary>
    
      <category term="PaaS" scheme="http://yoursite.com/categories/PaaS/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>rabbitmq</title>
    <link href="http://yoursite.com/2018/10/17/rabbitmq/"/>
    <id>http://yoursite.com/2018/10/17/rabbitmq/</id>
    <published>2018-10-17T03:49:05.000Z</published>
    <updated>2018-11-20T12:50:22.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a>Exchange</h2><p>在生产者/消费者模型中，生产者是不会直接将消息发送到队列的，生产者只能把消息发送到 exchange 上。<br><a id="more"></a></p><p>先看一个简单的模型：</p><p><img src="/2018/10/17/rabbitmq/exchanges.png" alt=""></p><p>exchange 的一端是生产者，另一端是队列，exchange 需要知道把消息发送到哪些队列。</p><p>有了 exchange 和队列之后，需要进行 bindings, 来告诉 exchange 把消息发送到指定队列。</p><p><img src="/2018/10/17/rabbitmq/bindings.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">channel.queue_bind(exchange=exchange_name,</span><br><span class="line">                   queue=queue_name,</span><br><span class="line">                   routing_key=<span class="string">'black'</span>)</span><br></pre></td></tr></table></figure><p>在 bindings 的时候，可以指定 routing_key，来控制消息要发送的队列。</p><p><img src="/2018/10/17/rabbitmq/direct-exchange.png" alt=""></p><p>当然多个队列可以有相同的 routing_key</p><p><img src="/2018/10/17/rabbitmq/direct-exchange-multiple.png" alt=""></p><p>一个完整的生产者消费者模型如下：</p><p><img src="/2018/10/17/rabbitmq/python-three-overall.png" alt=""></p><p>根据不同的规则，<br>rabbitmq 划分了四种 exchange：</p><ul><li>Direct</li><li>Fanout: 把消息发送到所有绑定的队列；</li><li>Topic:</li><li>Headers</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Exchange&quot;&gt;&lt;a href=&quot;#Exchange&quot; class=&quot;headerlink&quot; title=&quot;Exchange&quot;&gt;&lt;/a&gt;Exchange&lt;/h2&gt;&lt;p&gt;在生产者/消费者模型中，生产者是不会直接将消息发送到队列的，生产者只能把消息发送到 exchange 上。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mq" scheme="http://yoursite.com/categories/mq/"/>
    
    
      <category term="mq" scheme="http://yoursite.com/tags/mq/"/>
    
  </entry>
  
  <entry>
    <title>go io</title>
    <link href="http://yoursite.com/2018/08/22/go-io/"/>
    <id>http://yoursite.com/2018/08/22/go-io/</id>
    <published>2018-08-22T04:33:48.000Z</published>
    <updated>2018-10-09T04:18:32.639Z</updated>
    
    <content type="html"><![CDATA[<p>go 语言的标准库 io 包主要定义了常用的 io接口，具体如如下：</p><a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取接口</span></span><br><span class="line"><span class="keyword">type</span> Reader <span class="keyword">interface</span> &#123;</span><br><span class="line">    Read(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写接口</span></span><br><span class="line"><span class="keyword">type</span> Writer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Write(p []<span class="keyword">byte</span>) (n <span class="keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭读写</span></span><br><span class="line"><span class="keyword">type</span> Closer <span class="keyword">interface</span> &#123;</span><br><span class="line">    Close() error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定位置</span></span><br><span class="line"><span class="keyword">type</span> Seeker <span class="keyword">interface</span> &#123;</span><br><span class="line">    Seek(offset <span class="keyword">int64</span>, whence <span class="keyword">int</span>) (<span class="keyword">int64</span>, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定位置读取</span></span><br><span class="line"><span class="keyword">type</span> ReaderAt <span class="keyword">interface</span> &#123;</span><br><span class="line">    ReadAt(p []<span class="keyword">byte</span>, off <span class="keyword">int64</span>) (n <span class="keyword">int</span>, err error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// io 包还提供了一些组合接口</span></span><br><span class="line"><span class="keyword">type</span> ReadSeeker <span class="keyword">interface</span> &#123;</span><br><span class="line">    Reader</span><br><span class="line">    Seeker</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> WriteCloser <span class="keyword">interface</span> &#123;</span><br><span class="line">    Writer</span><br><span class="line">    Closer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> WriteSeeker <span class="keyword">interface</span> &#123;</span><br><span class="line">    Writer</span><br><span class="line">    Seeker</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReadWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">    Reader</span><br><span class="line">    Writer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReadWriteCloser <span class="keyword">interface</span> &#123;</span><br><span class="line">    Reader</span><br><span class="line">    Writer</span><br><span class="line">    Closer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ReadWriteSeeker <span class="keyword">interface</span> &#123;</span><br><span class="line">    Reader</span><br><span class="line">    Writer</span><br><span class="line">    Seeker</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了上面接口的包如下：</p><ul><li>strings.Reader 实现了 io.Reader</li><li>os.File 同时实现了 io.Reader 和 io.Writer</li><li>net.conn 实现了 io.Reader, io.Writer, io.Close</li><li>bufio.Reader/Writer 分别实现了io.Reader 和 io.Writer</li><li>bytes.Buffer 同时实现了 io.Reader 和 io.Writer</li><li>bytes.Reader 实现了io.Reader</li></ul><p>ioutil</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取所有数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadAll</span><span class="params">(r io.Reader)</span> <span class="params">([]<span class="keyword">byte</span>, error)</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;go 语言的标准库 io 包主要定义了常用的 io接口，具体如如下：&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="http://yoursite.com/categories/coding/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>iptables 介绍</title>
    <link href="http://yoursite.com/2018/06/29/iptables/"/>
    <id>http://yoursite.com/2018/06/29/iptables/</id>
    <published>2018-06-29T06:30:10.000Z</published>
    <updated>2018-11-29T06:34:44.017Z</updated>
    
    <content type="html"><![CDATA[<p>在Linux系统中，对于防火墙的实现一般分为包过滤防火墙，TCP-Wrapper即程序管控，代理服务器等几种方式。其中，iptables作为一种基于包过滤方式的防火墙工具，在实际中应用非常广泛，是非常重要的一个安全工具。真正实现防火墙功能的是 netfilter，它是一个 linux 内核模块，做实际的包过滤。实际上，除了 iptables 以外，还有很多类似的用户空间工具。</p><a id="more"></a><p><img src="/2018/06/29/iptables/iptables-netfilter.png" alt=""></p><h2 id="iptable-介绍"><a href="#iptable-介绍" class="headerlink" title="iptable 介绍"></a>iptable 介绍</h2><p><img src="/2018/06/29/iptables/Netfilter-packet-flow.svg" alt=""></p><p><img src="/2018/06/29/iptables/iptables.png" alt=""></p><h2 id="iptables的“链”与“表”"><a href="#iptables的“链”与“表”" class="headerlink" title="iptables的“链”与“表”"></a>iptables的“链”与“表”</h2><p>netfilter 使用表（table）和 链（chain）来组织网络包的处理规则（rule）。它默认定义了以下表和链：</p><p><img src="/2018/06/29/iptables/ipatbles_chain.png" alt=""></p><h3 id="filter表"><a href="#filter表" class="headerlink" title="filter表"></a>filter表</h3><p>主要用于对数据包进行过滤，根据具体的规则决定是否放行该数据包（如DROP、ACCEPT、REJECT、LOG）。filter 表对应的内核模块为iptable_filter，包含三个规则链：</p><ul><li><code>INPUT</code>链：INPUT针对那些目的地是本地的包</li><li><code>FORWARD</code>链：FORWARD过滤所有不是本地产生的并且目的地不是本地(即本机只是负责转发)的包</li><li><code>OUTPUT链</code>：OUTPUT是用来过滤所有本地生成的包</li></ul><h3 id="nat表"><a href="#nat表" class="headerlink" title="nat表"></a>nat表</h3><p>主要用于修改数据包的IP地址、端口号等信息（网络地址转换，如SNAT、DNAT、MASQUERADE、REDIRECT）。属于一个流的包(因为包<br>的大小限制导致数据可能会被分成多个数据包)只会经过这个表一次。如果第一个包被允许做NAT或Masqueraded，那么余下的包都会自动地被做相同的操作，也就是说，余下的包不会再通过这个表。表对应的内核模块为 iptable_nat，包含三个链：</p><ul><li><code>PREROUTING</code>链：作用是在包刚刚到达防火墙时改变它的目的地址</li><li><code>OUTPUT</code>链：改变本地产生的包的目的地址</li><li><code>POSTROUTING</code>链：在包就要离开防火墙之前改变其源地址</li></ul><h3 id="mangle表"><a href="#mangle表" class="headerlink" title="mangle表"></a>mangle表</h3><p>主要用于修改数据包的TOS（Type Of Service，服务类型）、TTL（Time To Live，生存周期）指以及为数据包设置Mark标记，以实现Qos(Quality Of Service，服务质量)调整以及策略路由等应用，由于需要相应的路由设备支持，因此应用并不广泛。包含五个规则链——PREROUTING，POSTROUTING，INPUT，OUTPUT，FORWARD。</p><h3 id="raw表"><a href="#raw表" class="headerlink" title="raw表"></a>raw表</h3><p>是自1.2.9以后版本的iptables新增的表，主要用于决定数据包是否被状态跟踪机制处理。在匹配数据包时，raw表的规则要优先于其他表。包含两条规则链——OUTPUT、PREROUTING</p><p>iptables中数据包和4种被跟踪连接的4种不同状态：</p><ul><li><code>NEW</code>：该包想要开始一个连接（重新连接或将连接重定向）</li><li><code>RELATED</code>：该包是属于某个已经建立的连接所建立的新连接。例如：FTP的数据传输连接就是控制连接所 - - - RELATED出来的连接。–icmp-type 0 ( ping 应答) 就是–icmp-type 8 (ping 请求)所RELATED出来的。</li><li><code>ESTABLISHED</code>：只要发送并接到应答，一个数据连接从NEW变为ESTABLISHED,而且该状态会继续匹配这个连接的后续数据包。</li><li><code>INVALID</code>：数据包不能被识别属于哪个连接或没有任何状态比如内存溢出，收到不知属于哪个连接的ICMP错误信息，一般应该DROP这个状态的任何数据。</li></ul><h3 id="防火墙处理数据包的方式（规则）："><a href="#防火墙处理数据包的方式（规则）：" class="headerlink" title="防火墙处理数据包的方式（规则）："></a>防火墙处理数据包的方式（规则）：</h3><ul><li><code>ACCEPT</code>：允许数据包通过</li><li><code>DROP</code>：直接丢弃数据包，不给任何回应信息</li><li><p><code>REJECT</code>：拒绝数据包通过，必要时会给数据发送端一个响应的信息。</p></li><li><p><code>SNAT</code>：源地址转换。在进入路由层面的route之后，出本地的网络栈之前，改写源地址，目标地址不变，并在本机建立NAT表项，当数据返回时，根据NAT表将目的地址数据改写为数据发送出去时候的源地址，并发送给主机。解决内网用户用同一个公网地址上网的问题。<br>MASQUERADE，是SNAT的一种特殊形式，适用于像adsl这种临时会变的ip上</p></li><li><p><code>DNAT</code>:目标地址转换。和SNAT相反，IP包经过route之前，重新修改目标地址，源地址不变，在本机建立NAT表项，当数据返回时，根据NAT表将源地址修改为数据发送过来时的目标地址，并发给远程主机。可以隐藏后端服务器的真实地址。（感谢网友提出之前这个地方与SNAT写反了）</p></li><li><p><code>REDIRECT</code>：是DNAT的一种特殊形式，将网络包转发到本地host上（不管IP头部指定的目标地址是啥），方便在本机做端口转发。</p></li><li><p><code>LOG</code>：在/var/log/messages文件中记录日志信息，然后将数据包传递给下一条规则。</p></li></ul><p>除去最后一个LOG，前3条规则匹配数据包后，该数据包不会再往下继续匹配了，所以编写的规则顺序极其关键。</p><h2 id="iptables编写规则"><a href="#iptables编写规则" class="headerlink" title="iptables编写规则"></a>iptables编写规则</h2><p>命令格式：</p><p><img src="/2018/06/29/iptables/iptables-cli.png" alt=""></p><ul><li><code>[-t 表名]</code>：该规则所操作的哪个表，可以使用filter、nat等，如果没有指定则默认为filter</li><li><code>-A</code>：新增一条规则，到该规则链列表的最后一行</li><li><code>-I</code>：插入一条规则，原本该位置上的规则会往后顺序移动，没有指定编号则为1</li><li><code>-D</code>：从规则链中删除一条规则，要么输入完整的规则，或者指定规则编号加以删除</li><li><code>-R</code>：替换某条规则，规则替换不会改变顺序，而且必须指定编号。</li><li><code>-P</code>：设置某条规则链的默认动作</li><li><code>-nL</code>：-L、-n，查看当前运行的防火墙规则列表</li><li><code>chain名</code>：指定规则表的哪个链，如INPUT、OUPUT、FORWARD、PREROUTING等</li><li><code>[规则编号]</code>：插入、删除、替换规则时用，–line-numbers显示号码</li><li><code>[-i|o 网卡名称]</code>：i是指定数据包从哪块网卡进入，o是指定数据包从哪块网卡输出</li><li><code>[-p 协议类型]</code>：可以指定规则应用的协议，包含tcp、udp和icmp等</li><li><code>[-s 源IP地址]</code>：源主机的IP地址或子网地址</li><li><code>[--sport 源端口号]</code>：数据包的IP的源端口号</li><li><code>[-d目标IP地址]</code>：目标主机的IP地址或子网地址</li><li><code>[--dport目标端口号]</code>：数据包的IP的目标端口号</li><li><code>-m</code>：extend matches，这个选项用于提供更多的匹配参数，如：<ul><li>-m state –state ESTABLISHED,RELATED</li><li>-m tcp –dport 22</li><li>-m multiport –dports 80,8080</li><li>-m icmp –icmp-type 8</li></ul></li><li><code>&lt;-j 动作&gt;</code>：处理数据包的动作，包括ACCEPT、DROP、REJECT等</li></ul><p>具体实例请参考 iptables常用实例备查。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Linux系统中，对于防火墙的实现一般分为包过滤防火墙，TCP-Wrapper即程序管控，代理服务器等几种方式。其中，iptables作为一种基于包过滤方式的防火墙工具，在实际中应用非常广泛，是非常重要的一个安全工具。真正实现防火墙功能的是 netfilter，它是一个 linux 内核模块，做实际的包过滤。实际上，除了 iptables 以外，还有很多类似的用户空间工具。&lt;/p&gt;
    
    </summary>
    
      <category term="os" scheme="http://yoursite.com/categories/os/"/>
    
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="iptables" scheme="http://yoursite.com/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>画图工具介绍</title>
    <link href="http://yoursite.com/2018/06/19/diagram/"/>
    <id>http://yoursite.com/2018/06/19/diagram/</id>
    <published>2018-06-19T15:11:15.000Z</published>
    <updated>2018-09-28T06:28:42.054Z</updated>
    
    <content type="html"><![CDATA[<p>在我们写文档的时候常常需要插入一些图片来辅助说明，文档可以用 git 来管理，换个人很容易修改，但是图片如果没有原图很难修改。这里我们介绍几款代码画图工具，可以很方便的用 git 管理。</p><a id="more"></a><h2 id="plantuml"><a href="#plantuml" class="headerlink" title="plantuml"></a>plantuml</h2><p>看名字就知道这个工具是用来画 uml 图的。 plantuml 在国外使用比较广泛，很多 web 工具都支持 plantuml.</p><p>plantuml 支持以下几种类型的 uml 图：</p><ul><li>Sequence diagram</li><li>Usecase diagram</li><li>Class diagram</li><li>Activity diagram</li><li>Component diagram</li><li>State diagram</li><li>Object diagram</li><li>Deployment diagram</li><li>Timing diagram</li></ul><p>plantuml 也支持几种非 uml 的图，具体如下：</p><ul><li>Wireframe graphical interface</li><li>Archimate diagram</li><li>Specification and Description Language (SDL)</li><li>Ditaa diagram</li><li>Gantt diagram</li><li>Mathematic with AsciiMath or JLaTeXMath notation</li></ul><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="Sequence-diagram"><a href="#Sequence-diagram" class="headerlink" title="Sequence diagram"></a>Sequence diagram</h4><p>基本用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Alice -&gt; Bob: Authentication Request</span><br><span class="line">Bob --&gt; Alice: Authentication Response</span><br><span class="line"></span><br><span class="line">Alice -&gt; Bob: Another authentication Request</span><br><span class="line">Alice &lt;-- Bob: another authentication Response</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p>声明参与者</p><p><img src="https://www.plantuml.com/plantuml/svg/TSx13O0W38NXErDqWIvWZ057S0F49f9WKIZxIyIJmVFxykVfB3P9EO8omJi2d62Ewm2co4uitbdnaM6Xgr0MLJV0QXxSKVcCd4bzOnohIs3xqOP7nARjdtxZcdYhXsy0"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">actor Foo1</span><br><span class="line">boundary Foo2</span><br><span class="line">control Foo3</span><br><span class="line">entity Foo4</span><br><span class="line">database Foo5</span><br><span class="line">collections Foo6</span><br><span class="line">Foo1 -&gt; Foo2 : To boundary</span><br><span class="line">Foo1 -&gt; Foo3 : To control</span><br><span class="line">Foo1 -&gt; Foo4 : To entity</span><br><span class="line">Foo1 -&gt; Foo5 : To database</span><br><span class="line">Foo1 -&gt; Foo6 : To collections</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="https://www.plantuml.com/plantuml/svg/JOyz3iCm24PtJi45EZH_GuSgKqxG2n3RGoGN99iClNr374SUFnvw7ynPAUd-ZK1E9U4YyeHLTlQKVfOwSCAQ95he8R1kUe81F2cjb8EbyLYBCJZTXBCD9Z0LFjwd15_u4QpU5lK5NIKj6GefZIqO2wZrBPggxRu5O0xiZmV_"></p><p>添加注释</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Alice-&gt;Bob : hello</span><br><span class="line">note left: this is a first note</span><br><span class="line"></span><br><span class="line">Bob-&gt;Alice : ok</span><br><span class="line">note right: this is another note</span><br><span class="line"></span><br><span class="line">Bob-&gt;Bob : I am thinking</span><br><span class="line">note left</span><br><span class="line">    a note</span><br><span class="line">    can also be defined</span><br><span class="line">    on several lines</span><br><span class="line">end note</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="https://www.plantuml.com/plantuml/svg/JOz13eCm30JlUSL-W0zmGBItFiCGGoAC8oLftr-77C3oORNUqSfpgPJhznJtahZoCBtJWX61HPBJL1d2MnrHGoom9MmnbufsSix2mtI1ngIZ0pdkuKcO6JW_YTxn0PqjfKVK_UvoiA4URt8b1Kb9M1YUjwZiBpyf2lyuaq3CB8xLTsesPH_z0G00"></p><h4 id="Usecase-diagram"><a href="#Usecase-diagram" class="headerlink" title="Usecase diagram"></a>Usecase diagram</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">:Main Admin: as Admin</span><br><span class="line">(Use the application) as (Use)</span><br><span class="line"></span><br><span class="line">User -&gt; (Start)</span><br><span class="line">User --&gt; (Use)</span><br><span class="line"></span><br><span class="line">Admin ---&gt; (Use)</span><br><span class="line"></span><br><span class="line">note right of Admin : This is an example.</span><br><span class="line"></span><br><span class="line">note right of (Use)</span><br><span class="line">  A note can also</span><br><span class="line">  be on several lines</span><br><span class="line">end note</span><br><span class="line"></span><br><span class="line">note &quot;This note is connected\nto several objects.&quot; as N2</span><br><span class="line">(Start) .. N2</span><br><span class="line">N2 .. (Use)</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="https://www.plantuml.com/plantuml/svg/NL0n3i8m3DppYXCJ7UZ0s0710s01DXRJ6XgKEbKJ4C_7IIgGa2BdV3wVusn3f2a-1sUQFLd1hXkiDA1Ga5cU0oFs31f7PrkArakLogbG6QDnmcg3vJ7vL7EUY5BFBahy6F6HCTbx7-5lPGeQd7eRe8S4_APXT5p_Iqi_i4FcMvMI2rwPAyCB0hzu8WTdXODXwR9kTbda0HdgtNeHRYDt5ud-s-Yl3oL3lKZx7TPctWbrdRB3Ee7oYAswwvzz0000"></p><h4 id="Class-diagram"><a href="#Class-diagram" class="headerlink" title="Class diagram"></a>Class diagram</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Class01 &lt;|-- Class02</span><br><span class="line">Class03 *-- Class04</span><br><span class="line">Class05 o-- Class06</span><br><span class="line">Class07 .. Class08</span><br><span class="line">Class09 -- Class10</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNBEIImkDZ1KiAdHrLM0S8oWWiOAMd0n4wYOgK8-NCmCAcQkeAS75RA02bagm5GP6d0vfEQb0Aq20000"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Class11 &lt;|.. Class12</span><br><span class="line">Class13 --&gt; Class14</span><br><span class="line">Class15 ..&gt; Class16</span><br><span class="line">Class17 ..|&gt; Class18</span><br><span class="line">Class19 &lt;--* Class20</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNBEIImkDZHKiAdHqrE0S8oWWiOAkhfsK34Jg9YfWfuUJCmCAcOE5Ak12Lf01IqLR7HrjI22HWPS3gbvAK3h0000"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">Class21 #-- Class22</span><br><span class="line">Class23 x-- Class24</span><br><span class="line">Class25 &#125;-- Class26</span><br><span class="line">Class27 +-- Class28</span><br><span class="line">Class29 ^-- Class30</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNBEIImkDZ9KKDRLLO2mZQ1YnWeLS34Jg9YfGYrSp0mgPgwW3HUpW8fPAiJ1n8mDk1nIyrA0TW40"></p><p>指定关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">Class01 &quot;1&quot; *-- &quot;many&quot; Class02 : contains</span><br><span class="line"></span><br><span class="line">Class03 o-- Class04 : aggregation</span><br><span class="line"></span><br><span class="line">Class05 --&gt; &quot;1&quot; Class06</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuU9opaaiBZOmL50oL5BGqjLLKCfDpAjKKe086obOAIJdvvKaPkOLmvGQA-G3bK7O9a3vnFJqejJqn9BC_3oO4bC5NLqxi8aGlXaNbqDgNWhGFW00"></p><p>属性类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">class Dummy &#123;</span><br><span class="line"> -field1</span><br><span class="line"> #field2</span><br><span class="line"> ~method1()</span><br><span class="line"> +method2()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuU9ApaaiBbPmAStDhLIevbBGJSjCpKanv59G1ZECk1JgSbDBCl9J33KqkHIq8MmZ8BiM0000"></p><h4 id="Activity-diagram"><a href="#Activity-diagram" class="headerlink" title="Activity diagram"></a>Activity diagram</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">start</span><br><span class="line"></span><br><span class="line">if (multiprocessor?) then (yes)</span><br><span class="line">  fork</span><br><span class="line">    :Treatment 1;</span><br><span class="line">  fork again</span><br><span class="line">    :Treatment 2;</span><br><span class="line">  end fork</span><br><span class="line">else (monoproc)</span><br><span class="line">  :Treatment 1;</span><br><span class="line">  :Treatment 2;</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="https://www.plantuml.com/plantuml/svg/NOun3i8m34Ltdy9ZEy880pq45uZ0eH69NTdkmErn2aixVKjFxtzFvabzRHLWkm1Ang6jrSkYyY0pqTk8FXFZy24R0J6BlYCGBtUbv8tOyNJz0qolLFY8pnqJFtykLQCO4PQ-qIkFJNirn981fiZuz0i0"></p><h4 id="State-diagram"><a href="#State-diagram" class="headerlink" title="State diagram"></a>State diagram</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">scale 600 width</span><br><span class="line"></span><br><span class="line">[*] -&gt; State1</span><br><span class="line">State1 --&gt; State2 : Succeeded</span><br><span class="line">State1 --&gt; [*] : Aborted</span><br><span class="line">State2 --&gt; State3 : Succeeded</span><br><span class="line">State2 --&gt; [*] : Aborted</span><br><span class="line">state State3 &#123;</span><br><span class="line">  state &quot;Accumulate Enough Data\nLong State Name&quot; as long1</span><br><span class="line">  long1 : Just a test</span><br><span class="line">  [*] --&gt; long1</span><br><span class="line">  long1 --&gt; long1 : New Data</span><br><span class="line">  long1 --&gt; ProcessData : Enough Data</span><br><span class="line">&#125;</span><br><span class="line">State3 --&gt; State3 : Failed</span><br><span class="line">State3 --&gt; [*] : Succeeded / Save Result</span><br><span class="line">State3 --&gt; [*] : Aborted</span><br><span class="line"> </span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="https://www.plantuml.com/plantuml/svg/RL5DQy904BtlhtXuB8WQmOC7KMXxA4N47As7wMPGOPD0PbOFudztatGrmPvcUHypysQNebIfpvqHIuun6uznEMLwD6RtjiTmWLH9UMBQWc544ioHUckPCywwR6sRO_LRLXg9v6cRljgIVsnI4z5nDK0B35RM-jox-lrHbFvmn3if_HJVPN5evLXJpWEGm0Li4gnD3Rs_l2W8og81RTA5kNtL0mdwDL-QxZroKvMMHMeyI3exc9lvMxUNzPDEBWQTTe8-Re0HKZepjYpUwQimNWHcoKKMFkeE"></p><h4 id="Object-diagram"><a href="#Object-diagram" class="headerlink" title="Object diagram"></a>Object diagram</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">object Object01</span><br><span class="line">object Object02</span><br><span class="line">object Object03</span><br><span class="line">object Object04</span><br><span class="line">object Object05</span><br><span class="line">object Object06</span><br><span class="line">object Object07</span><br><span class="line">object Object08</span><br><span class="line"></span><br><span class="line">Object01 &lt;|-- Object02</span><br><span class="line">Object03 *-- Object04</span><br><span class="line">Object05 o-- &quot;4&quot; Object06</span><br><span class="line">Object07 .. Object08 : some labels</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuSfFoafDBb7m1rC6XcXy8pI-CHhV18rlYiOtG-ERe_4jkBXWDYlOrEZg8ko5MQYWXH0rWOcQAkG3HPLCb13sm2nGqDE36wvWfL2Sdvkga9EOb9fJpEMGcfS2z380"></p><h4 id="Deployment-diagram"><a href="#Deployment-diagram" class="headerlink" title="Deployment diagram"></a>Deployment diagram</h4><p>支持类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">actor actor</span><br><span class="line">agent agent</span><br><span class="line">artifact artifact</span><br><span class="line">boundary boundary</span><br><span class="line">card card</span><br><span class="line">cloud cloud</span><br><span class="line">component component</span><br><span class="line">control control</span><br><span class="line">database database</span><br><span class="line">entity entity</span><br><span class="line">file file</span><br><span class="line">folder folder</span><br><span class="line">frame frame</span><br><span class="line">interface  interface</span><br><span class="line">node node</span><br><span class="line">package package</span><br><span class="line">queue queue</span><br><span class="line">stack stack</span><br><span class="line">rectangle rectangle</span><br><span class="line">storage storage</span><br><span class="line">usecase usecase</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="https://www.plantuml.com/plantuml/svg/FP1B4eGm24JtVGgEubKmGSio1WV9mjiFyRTv_Gho8HaEP_Es5N1oDRe8dgKwNKIqbodAz0f6RJMpdVGA4bkc3gIYBRGJIRTTQp_fiwXLDotq938xZtm8lO9OjVX9Ts1QYb079YrPZEx0PBn5enDBTR6OJ8W-HTKir86TqnfFeIVnQzA4BY9UdrQw29FaNEUuxxFeg_MzJw8TalgqJsAGckFp_W00"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">node node1</span><br><span class="line">node node2</span><br><span class="line">node node3</span><br><span class="line">node node4</span><br><span class="line">node node5</span><br><span class="line">node1 -- node2</span><br><span class="line">node1 .. node3</span><br><span class="line">node1 ~~ node4</span><br><span class="line">node1 == node5</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuUBAoqz9LG0HXWYc4O9fZ62Q89YcOAQXWgukadf31Jqz93s62dLrIFeC5MnjeNgv75BpKe2M0m00"></p><h4 id="Timing-diagram"><a href="#Timing-diagram" class="headerlink" title="Timing diagram"></a>Timing diagram</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">robust &quot;DNS Resolver&quot; as DNS</span><br><span class="line">robust &quot;Web Browser&quot; as WB</span><br><span class="line">concise &quot;Web User&quot; as WU</span><br><span class="line"></span><br><span class="line">@0</span><br><span class="line">WU is Idle</span><br><span class="line">WB is Idle</span><br><span class="line">DNS is Idle</span><br><span class="line"></span><br><span class="line">@+100</span><br><span class="line">WU -&gt; WB : URL</span><br><span class="line">WU is Waiting</span><br><span class="line">WB is Processing</span><br><span class="line"></span><br><span class="line">@+200</span><br><span class="line">WB is Waiting</span><br><span class="line">WB -&gt; DNS@+50 : Resolve URL</span><br><span class="line"></span><br><span class="line">@+100</span><br><span class="line">DNS is Processing</span><br><span class="line"></span><br><span class="line">@+300</span><br><span class="line">DNS is Idle</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="https://www.plantuml.com/plantuml/svg/NP1F2y8m3CNl-HHXro5CnOi7ASMB82AJqlF-12biApITVdspMITw2tbvlvT4SQn27FiEWgz7ZfWTBpSiYNtte91XnIYDHRHKemx-oKcp6Xe_D8xfhPb5C02g06lGCPxQZi3gfPmYFZMeV5tCWwk3u72FfZmddwrSTCCzMQ_1DyGyDSIqcKpwRqeGmbRvhX1EEcBcfPGK_4lQVeLv8qL3Amzv0G00"></p><h4 id="Wireframe-graphical-interface"><a href="#Wireframe-graphical-interface" class="headerlink" title="Wireframe graphical interface"></a>Wireframe graphical interface</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@startsalt</span><br><span class="line">&#123;+</span><br><span class="line">&#123;* File | Edit | Source | Refactor </span><br><span class="line"> Refactor | New | Open File | - | Close | Close All &#125;</span><br><span class="line">&#123;/ General | Fullscreen | Behavior | Saving &#125;</span><br><span class="line">&#123;</span><br><span class="line">    &#123; Open image in: | ^Smart Mode^ &#125;</span><br><span class="line">    [X] Smooth images when zoomed</span><br><span class="line">    [X] Confirm image deletion</span><br><span class="line">    [ ] Show hidden images </span><br><span class="line">&#125;</span><br><span class="line">[Close]</span><br><span class="line">&#125;</span><br><span class="line">@endsalt</span><br></pre></td></tr></table></figure><p><img src="https://www.plantuml.com/plantuml/svg/HP3B2i8m44Nt-OfPA-BULLNKbGfs8uX2Q4OJc6GaYHPi_NUdraSWcHlct9j7aRAEEMdAgXcgPW1BHmWjB8pBKag-nQhRx_2igymHr5-siC5QrkqLmzStaZadJlYhKo9ugcOCAmmODKbZUIDALKInjJ13g-_k7LUA29UELY2ZwPETrnS45oP2d4elruKr6pm9rr67_H5ApvnjJoQehRWUp1xDZvXpEBleFs462RFZqBT10YpNO9qnt_CIgASwl5zm55LWCDqdlG00"></p><h4 id="Archimate-diagram"><a href="#Archimate-diagram" class="headerlink" title="Archimate diagram"></a>Archimate diagram</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">sprite $bProcess jar:archimate/business-process</span><br><span class="line">sprite $aService jar:archimate/application-service</span><br><span class="line">sprite $aComponent jar:archimate/application-component</span><br><span class="line"></span><br><span class="line">archimate #Business &quot;Handle claim&quot;  as HC &lt;&lt;business-process&gt;&gt;</span><br><span class="line">archimate #Business &quot;Capture Information&quot;  as CI &lt;&lt;business-process&gt;&gt;</span><br><span class="line">archimate #Business &quot;Notify\nAdditional Stakeholders&quot; as NAS &lt;&lt;business-process&gt;&gt;</span><br><span class="line">archimate #Business &quot;Validate&quot; as V &lt;&lt;business-process&gt;&gt;</span><br><span class="line">archimate #Business &quot;Investigate&quot; as I &lt;&lt;business-process&gt;&gt;</span><br><span class="line">archimate #Business &quot;Pay&quot; as P &lt;&lt;business-process&gt;&gt;</span><br><span class="line"></span><br><span class="line">HC *-down- CI</span><br><span class="line">HC *-down- NAS</span><br><span class="line">HC *-down- V</span><br><span class="line">HC *-down- I</span><br><span class="line">HC *-down- P</span><br><span class="line"></span><br><span class="line">CI -right-&gt;&gt; NAS</span><br><span class="line">NAS -right-&gt;&gt; V</span><br><span class="line">V -right-&gt;&gt; I</span><br><span class="line">I -right-&gt;&gt; P</span><br><span class="line"></span><br><span class="line">archimate #APPLICATION &quot;Scanning&quot; as scanning &lt;&lt;application-service&gt;&gt;</span><br><span class="line">archimate #APPLICATION &quot;Customer admnistration&quot; as customerAdministration &lt;&lt;application-service&gt;&gt;</span><br><span class="line">archimate #APPLICATION &quot;Claims admnistration&quot; as claimsAdministration &lt;&lt;application-service&gt;&gt;</span><br><span class="line">archimate #APPLICATION Printing  &lt;&lt;application-service&gt;&gt;</span><br><span class="line">archimate #APPLICATION Payment  &lt;&lt;application-service&gt;&gt;</span><br><span class="line"></span><br><span class="line">scanning -up-&gt; CI</span><br><span class="line">customerAdministration  -up-&gt; CI</span><br><span class="line">claimsAdministration -up-&gt; NAS</span><br><span class="line">claimsAdministration -up-&gt; V</span><br><span class="line">claimsAdministration -up-&gt; I</span><br><span class="line">Payment -up-&gt; P</span><br><span class="line"></span><br><span class="line">Printing -up-&gt; V</span><br><span class="line">Printing -up-&gt; P</span><br><span class="line"></span><br><span class="line">archimate #APPLICATION &quot;Document\nManagement\nSystem&quot; as DMS &lt;&lt;application-component&gt;&gt;</span><br><span class="line">archimate #APPLICATION &quot;General\nCRM\nSystem&quot; as CRM &lt;&lt;application-component&gt;&gt;</span><br><span class="line">archimate #APPLICATION &quot;Home &amp; Away\nPolicy\nAdministration&quot; as HAPA &lt;&lt;application-component&gt;&gt;</span><br><span class="line">archimate #APPLICATION &quot;Home &amp; Away\nFinancial\nAdministration&quot; as HFPA &lt;&lt;application-component&gt;&gt;</span><br><span class="line"></span><br><span class="line">DMS .up.|&gt; scanning</span><br><span class="line">DMS .up.|&gt; Printing</span><br><span class="line">CRM .up.|&gt; customerAdministration</span><br><span class="line">HAPA .up.|&gt; claimsAdministration</span><br><span class="line">HFPA .up.|&gt; Payment</span><br><span class="line"></span><br><span class="line">legend left</span><br><span class="line">Example from the &quot;Archisurance case study&quot; (OpenGroup).</span><br><span class="line">See </span><br><span class="line">==</span><br><span class="line">&lt;$bProcess&gt; :business process</span><br><span class="line">==</span><br><span class="line">&lt;$aService&gt; : application service</span><br><span class="line">==</span><br><span class="line">&lt;$aComponent&gt; : appplication component</span><br><span class="line">endlegend</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="https://www.plantuml.com/plantuml/svg/fLLDRzim3BthLmZPC6m3dDsBrAZdhes1fJNcmQTSM9j9j5cI8Sdj0kp7J_9NdC0ruFKIXEHxJoH5YpVQW38LBmZHfM86wVkdMCaCjQQ_G5s1oWwCWy4lJvLcmhgziWdtU4XGFRCCB_1GbWNBm30fFDqWJfHGyb8A56Q2b7KOGde0VVUrJOCkrY3o0cbM0ECBIa7JTKXNgyiyVN-S7a9fAeKq4ZkfU7raen96CrGUf66xurO4USwS11GqCV0R3xB8KUc54tm8aXcAAHGijxwQciuWHk8PjM7xZZkdZ1YEDISUvn3RsSzUBb-4Pzipj6njGpCT6cV0c13RM4-n_S5ulbyJNMDEdfIa0oiYGtHyDWD177-Fmk1dzFX05qa6GZ2nh_FNhM7B69c_y-hFLC9A6ybHKSYvODgeTY2iPjQ6WfopKsZ-2MvEzPX-7NYRUgoOCAxksKGuSlSPlieZVKkzglHyT_slD6G06AkeYRfhdmYdKy68TDasjXsAlkwEVk6Oc9jRcLLER2is862FpV_ag0to-bvkDyb5L_eNQUAQxr6WWc8hmX-RCpbh_uVSsZQQVg312zX79fQMMpysm-xKwkiW3jugVyS4Y8ovvCTEk9iyWRXsBQjo-TVllyAXhxiOulhG-iO7YTIrT92HSI1rAfrkCnA45BX7aTC2TuPy-mEyjBjXfoIdve1q4RW6w4hP0ktA08rKcogtZzx7nnB5lP9L-Mb94aHAhg_9gb-2FhtgtaFQBRuQq6qz2w23dj1krJMWVi-ri1FkjDtGhJ6NEo4tzjVkudy0"></p><h4 id="Specification-and-Description-Language-SDL"><a href="#Specification-and-Description-Language-SDL" class="headerlink" title="Specification and Description Language (SDL)"></a>Specification and Description Language (SDL)</h4><p>也是活动图</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">start</span><br><span class="line"></span><br><span class="line">if (multiprocessor?) then (yes)</span><br><span class="line">  fork</span><br><span class="line">    :Treatment 1;</span><br><span class="line">  fork again</span><br><span class="line">    :Treatment 2;</span><br><span class="line">  end fork</span><br><span class="line">else (monoproc)</span><br><span class="line">  :Treatment 1;</span><br><span class="line">  :Treatment 2;</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="https://www.plantuml.com/plantuml/svg/NOun3i8m34Ltdy9ZEy880pq45uZ0eH69NTdkmErn2aixVKjFxtzFvabzRHLWkm1Ang6jrSkYyY0pqTk8FXFZy24R0J6BlYCGBtUbv8tOyNJz0qolLFY8pnqJFtykLQCO4PQ-qIkFJNirn981fiZuz0i0"></p><h4 id="Ditaa-diagram"><a href="#Ditaa-diagram" class="headerlink" title="Ditaa diagram"></a>Ditaa diagram</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@startditaa</span><br><span class="line">+--------+   +-------+    +-------+</span><br><span class="line">|        +---+ ditaa +--&gt; |       |</span><br><span class="line">|  Text  |   +-------+    |diagram|</span><br><span class="line">|Document|   |!magic!|    |       |</span><br><span class="line">|     &#123;d&#125;|   |       |    |       |</span><br><span class="line">+---+----+   +-------+    +-------+</span><br><span class="line">    :                         ^</span><br><span class="line">    |       Lots of work      |</span><br><span class="line">    +-------------------------+</span><br><span class="line">@endditaa</span><br></pre></td></tr></table></figure><p><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgISaiIKpaqjQ50cq51GLj93Q2mrMZ00NQO3cmHX3RJW4cKmDI4v9QKQ805a8nfoObCp6zA34NgCObFxaqDpMl1AIcHZ4tCJqpMH5i18evG52TKbk3B8og1kmC0cu6yQmKS84uBcGJVV9BYXNoqnJAyukoONOWcuO9jBaSKlDIm0410000"></p><h4 id="Gantt-diagram"><a href="#Gantt-diagram" class="headerlink" title="Gantt diagram"></a>Gantt diagram</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@startgantt</span><br><span class="line">project starts the 2018/04/09</span><br><span class="line">saturday are closed</span><br><span class="line">sunday are closed</span><br><span class="line">2018/05/01 is closed</span><br><span class="line">2018/04/17 to 2018/04/19 is closed</span><br><span class="line">[Prototype design] lasts 14 days</span><br><span class="line">[Test prototype] lasts 4 days</span><br><span class="line">[Test prototype] starts at [Prototype design]&apos;s end</span><br><span class="line">[Prototype design] is colored in Fuchsia/FireBrick </span><br><span class="line">[Test prototype] is colored in GreenYellow/Green </span><br><span class="line">@endgantt</span><br></pre></td></tr></table></figure><p><img src="https://www.plantuml.com/plantuml/svg/TL2xRiCm3Dpr5RTrb5KuQBCP7P8rGvR0o23OHAnMa0oIHf2_Z-FMHLst6t6y5rc9UjQBJwgcv_nEZMA21DeHdWltQelI5biZNWTk_GsU2KtCGgsH8Vr2FWKRMpW4MOAbTI_G_EtfjZyezO6pPhtrX9OaND8PqSlOmfKO8yJKHn95FxFczN_RhnkyOkty9A3qP-IZJuwPgKL8s0rD9y7RNM1wuz1yO9spLEoPA9qendorqmnJZL7JU-y0"></p><h4 id="Mathematic-with-AsciiMath-or-JLaTeXMath-notation"><a href="#Mathematic-with-AsciiMath-or-JLaTeXMath-notation" class="headerlink" title="Mathematic with AsciiMath or JLaTeXMath notation"></a>Mathematic with AsciiMath or JLaTeXMath notation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">:&lt;math&gt;int_0^1f(x)dx&lt;/math&gt;;</span><br><span class="line">:&lt;math&gt;x^2+y_1+z_12^34&lt;/math&gt;;</span><br><span class="line">note right</span><br><span class="line">Try also</span><br><span class="line">&lt;math&gt;d/dxf(x)=lim_(h-&gt;0)(f(x+h)-f(x))/h&lt;/math&gt;</span><br><span class="line">&lt;latex&gt;P(y|\mathbf&#123;x&#125;) \mbox&#123; or &#125; f(\mathbf&#123;x&#125;)+\epsilon&lt;/latex&gt;</span><br><span class="line">end note</span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="https://www.plantuml.com/plantuml/svg/JO_H3e8W58RlUGekOSoXrbMPyn6wwDB9S62u8JIa3JFVFSbgtPtpVVl_dLEDdZj_7pGu50FtgkoDPscJTIXW4GhwPiUl34rE9fQH1yloPhV_QMEzXAw_AWykRe9SZnPi2K55Y5qdtGyCgQHCCLfted0ICQRgKm8ApRqCvHbDppgIjfl3Wc4zj3RCq3gum0xz6LBBszXhQmgw9O4q0iPBGBLEwqil"></p><h2 id="python-画图工具"><a href="#python-画图工具" class="headerlink" title="python 画图工具"></a>python 画图工具</h2><p>python 也提供了几个画图工具，如果使用 sphinx 编写文档，可以直接把代码嵌套到文档中。</p><ul><li><a href="http://blockdiag.com/en/" target="_blank" rel="noopener">blockdiag</a></li><li><a href="http://blockdiag.com/en/seqdiag/index.html" target="_blank" rel="noopener">seqdiag</a></li><li><a href="http://blockdiag.com/en/actdiag/index.html" target="_blank" rel="noopener">actdiag</a></li><li><a href="http://blockdiag.com/en/nwdiag/index.html" target="_blank" rel="noopener">nwdiag</a></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install blockdiag</span><br><span class="line">pip install seqdiag</span><br><span class="line">pip install actdiag</span><br><span class="line">pip install nwdiag</span><br></pre></td></tr></table></figure><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>生成图片一般用指定命令接文件名即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blockdiag test.diag</span><br></pre></td></tr></table></figure><h4 id="blockdiag"><a href="#blockdiag" class="headerlink" title="blockdiag"></a>blockdiag</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">blockdiag &#123;</span><br><span class="line">   orientation = portrait</span><br><span class="line"></span><br><span class="line">   A -&gt; B -&gt; C;</span><br><span class="line">        B -&gt; D;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/06/19/diagram/blockdiag-01.png" alt=""></p><p>blockdiag 可以设置很多属性，例如图片类型，颜色，大小，特效等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">blockdiag &#123;</span><br><span class="line">   // Set stacked to nodes.</span><br><span class="line">   stacked [stacked];</span><br><span class="line">   ellipse [shape = &quot;ellipse&quot;, stacked];</span><br><span class="line"></span><br><span class="line">   stacked -&gt; ellipse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/06/19/diagram/blockdiag-02.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">blockdiag &#123;</span><br><span class="line">   A -&gt; B [label=&apos;text&apos;, fontsize=16];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/06/19/diagram/blockdiag-03.png" alt=""></p><h4 id="seqdiag"><a href="#seqdiag" class="headerlink" title="seqdiag"></a>seqdiag</h4><p>seqdiag 用来画时序图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">seqdiag &#123;</span><br><span class="line">  browser  -&gt; webserver [label = &quot;GET /index.html&quot;];</span><br><span class="line">  browser &lt;-- webserver;</span><br><span class="line">  browser  -&gt; webserver [label = &quot;POST /blog/comment&quot;];</span><br><span class="line">              webserver  -&gt; database [label = &quot;INSERT comment&quot;];</span><br><span class="line">              webserver &lt;-- database;</span><br><span class="line">  browser &lt;-- webserver;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/06/19/diagram/seqdiag-01.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">seqdiag &#123;</span><br><span class="line">  A -&gt; B;</span><br><span class="line"></span><br><span class="line">  // Separator</span><br><span class="line">  === Separator line ===</span><br><span class="line"></span><br><span class="line">  A -&gt; B;</span><br><span class="line"></span><br><span class="line">  // Delay separator</span><br><span class="line">  ... Separator line ...</span><br><span class="line"></span><br><span class="line">  A -&gt; B;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/06/19/diagram/seqdiag-02.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">seqdiag &#123;</span><br><span class="line">  // Use note (put note on rightside)</span><br><span class="line">  browser -&gt; webserver [note = &quot;request\nGET /&quot;];</span><br><span class="line">  browser &lt;- webserver;</span><br><span class="line"></span><br><span class="line">  // Use leftnote and rightnote</span><br><span class="line">  browser -&gt; webserver [leftnote = &quot;send request&quot;];</span><br><span class="line">  browser &lt;- webserver [rightnote = &quot;send response&quot;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/06/19/diagram/seqdiag-03.png" alt=""></p><h4 id="actdiag"><a href="#actdiag" class="headerlink" title="actdiag"></a>actdiag</h4><p>actdiag 用来画活动图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">actdiag &#123;</span><br><span class="line">  write -&gt; convert -&gt; image</span><br><span class="line"></span><br><span class="line">  lane user &#123;</span><br><span class="line">     label = &quot;User&quot;</span><br><span class="line">     write [label = &quot;Writing reST&quot;];</span><br><span class="line">     image [label = &quot;Get diagram IMAGE&quot;];</span><br><span class="line">  &#125;</span><br><span class="line">  lane actdiag &#123;</span><br><span class="line">     convert [label = &quot;Convert reST to Image&quot;];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/06/19/diagram/actdiag-01.png" alt=""></p><h4 id="nwdiag"><a href="#nwdiag" class="headerlink" title="nwdiag"></a>nwdiag</h4><p>nwdiag 主要用来画网络连线图，报文结构等。</p><p>普通网络图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">nwdiag &#123;</span><br><span class="line">  network dmz &#123;</span><br><span class="line">      address = &quot;210.x.x.x/24&quot;</span><br><span class="line"></span><br><span class="line">      web01 [address = &quot;210.x.x.1&quot;];</span><br><span class="line">      web02 [address = &quot;210.x.x.2&quot;];</span><br><span class="line">  &#125;</span><br><span class="line">  network internal &#123;</span><br><span class="line">      address = &quot;172.x.x.x/24&quot;;</span><br><span class="line"></span><br><span class="line">      web01 [address = &quot;172.x.x.1&quot;];</span><br><span class="line">      web02 [address = &quot;172.x.x.2&quot;];</span><br><span class="line">      db01;</span><br><span class="line">      db02;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/06/19/diagram/nwdiag-01.png" alt=""></p><p>指定多个 ip:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">nwdiag &#123;</span><br><span class="line">  network dmz &#123;</span><br><span class="line">      address = &quot;210.x.x.x/24&quot;</span><br><span class="line"></span><br><span class="line">      // set multiple addresses (using comma)</span><br><span class="line">      web01 [address = &quot;210.x.x.1, 210.x.x.20&quot;];</span><br><span class="line">      web02 [address = &quot;210.x.x.2&quot;];</span><br><span class="line">  &#125;</span><br><span class="line">  network internal &#123;</span><br><span class="line">      address = &quot;172.x.x.x/24&quot;;</span><br><span class="line"></span><br><span class="line">      web01 [address = &quot;172.x.x.1&quot;];</span><br><span class="line">      web02 [address = &quot;172.x.x.2&quot;];</span><br><span class="line">      db01;</span><br><span class="line">      db02;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/06/19/diagram/nwdiag-02.png" alt=""></p><p>分组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">nwdiag &#123;</span><br><span class="line">  network Sample_front &#123;</span><br><span class="line">    address = &quot;192.168.10.0/24&quot;;</span><br><span class="line"></span><br><span class="line">    // define group</span><br><span class="line">    group web &#123;</span><br><span class="line">      web01 [address = &quot;.1&quot;];</span><br><span class="line">      web02 [address = &quot;.2&quot;];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  network Sample_back &#123;</span><br><span class="line">    address = &quot;192.168.20.0/24&quot;;</span><br><span class="line">    web01 [address = &quot;.1&quot;];</span><br><span class="line">    web02 [address = &quot;.2&quot;];</span><br><span class="line">    db01 [address = &quot;.101&quot;];</span><br><span class="line">    db02 [address = &quot;.102&quot;];</span><br><span class="line"></span><br><span class="line">    // define network using defined nodes</span><br><span class="line">    group db &#123;</span><br><span class="line">      db01;</span><br><span class="line">      db02;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/06/19/diagram/nwdiag-03.png" alt=""></p><p>peer networks</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nwdiag &#123;</span><br><span class="line">  inet [shape = cloud];</span><br><span class="line">  inet -- router;</span><br><span class="line"></span><br><span class="line">  network &#123;</span><br><span class="line">    router;</span><br><span class="line">    web01;</span><br><span class="line">    web02;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/06/19/diagram/nwdiag-04.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">rackdiag &#123;</span><br><span class="line">  // define height of rack</span><br><span class="line">  16U;</span><br><span class="line"></span><br><span class="line">  // define rack items</span><br><span class="line">  1: UPS [2U];</span><br><span class="line">  3: DB Server</span><br><span class="line">  4: Web Server 1  // put 2 units to rack-level 4</span><br><span class="line">  4: Web Server 2</span><br><span class="line">  5: Web Server 3</span><br><span class="line">  5: Web Server 4</span><br><span class="line">  7: Load Balancer</span><br><span class="line">  8: L3 Switch</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/06/19/diagram/rackdiag-01.png" alt=""></p><p>多个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">rackdiag &#123;</span><br><span class="line">  // define 1st rack</span><br><span class="line">  rack &#123;</span><br><span class="line">    16U;</span><br><span class="line"></span><br><span class="line">    // define rack items</span><br><span class="line">    1: UPS [2U];</span><br><span class="line">    3: DB Server</span><br><span class="line">    4: Web Server</span><br><span class="line">    5: Web Server</span><br><span class="line">    6: Web Server</span><br><span class="line">    7: Load Balancer</span><br><span class="line">    8: L3 Switch</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // define 2nd rack</span><br><span class="line">  rack &#123;</span><br><span class="line">    12U;</span><br><span class="line"></span><br><span class="line">    // define rack items</span><br><span class="line">    1: UPS [2U];</span><br><span class="line">    3: DB Server</span><br><span class="line">    4: Web Server</span><br><span class="line">    5: Web Server</span><br><span class="line">    6: Web Server</span><br><span class="line">    7: Load Balancer</span><br><span class="line">    8: L3 Switch</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/06/19/diagram/rackdiag-02.png" alt=""></p><p>TCP 报文结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  colwidth = 32</span><br><span class="line">  node_height = 72</span><br><span class="line"></span><br><span class="line">  0-15: Source Port</span><br><span class="line">  16-31: Destination Port</span><br><span class="line">  32-63: Sequence Number</span><br><span class="line">  64-95: Acknowledgment Number</span><br><span class="line">  96-99: Data Offset</span><br><span class="line">  100-105: Reserved</span><br><span class="line">  106: URG</span><br><span class="line">  107: ACK</span><br><span class="line">  108: PSH</span><br><span class="line">  109: RST</span><br><span class="line">  110: SYN</span><br><span class="line">  111: FIN</span><br><span class="line">  112-127: Window</span><br><span class="line">  128-143: Checksum</span><br><span class="line">  144-159: Urgent Pointer</span><br><span class="line">  160-191: (Options and Padding)</span><br><span class="line">  192-223: data [colheight = 3]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/06/19/diagram/packetdiag-01.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我们写文档的时候常常需要插入一些图片来辅助说明，文档可以用 git 来管理，换个人很容易修改，但是图片如果没有原图很难修改。这里我们介绍几款代码画图工具，可以很方便的用 git 管理。&lt;/p&gt;
    
    </summary>
    
      <category term="tools" scheme="http://yoursite.com/categories/tools/"/>
    
    
      <category term="diagram" scheme="http://yoursite.com/tags/diagram/"/>
    
  </entry>
  
  <entry>
    <title>oslo 源码分析之 context</title>
    <link href="http://yoursite.com/2018/06/03/oslo-context/"/>
    <id>http://yoursite.com/2018/06/03/oslo-context/</id>
    <published>2018-06-03T07:28:40.000Z</published>
    <updated>2018-09-28T06:28:42.059Z</updated>
    
    <content type="html"><![CDATA[<p>在介绍源码之前，我们先谈谈什么是 context. 一开始不太理解什么是 context，其实它是一个统称，在不同的地方有不同的含义，所以不是很直白。context 翻译成中文是“上下文”的意思，说白了和文章的上下文是一个意思，通俗一点讲就是环境。例如用户信息，token 之类的。如果还是不明白，看看下面的例子。</p><a id="more"></a><p>openstack 的 context 主要是用来保存 http request 相关信息。 context 模块主要定义了一个 RequestContext 类，里面保存了跟 request 请求相关的信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestContext</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""Helper class to represent useful information about a request context.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Stores information about the security context under which the user</span></span><br><span class="line"><span class="string">    accesses the system, as well as additional request information.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    user_idt_format = <span class="string">u'&#123;user&#125; &#123;tenant&#125; &#123;domain&#125; &#123;user_domain&#125; &#123;p_domain&#125;'</span></span><br><span class="line">    <span class="comment"># Can be overridden in subclasses to specify extra keys that should be</span></span><br><span class="line">    <span class="comment"># read when constructing a context using from_dict.</span></span><br><span class="line">    FROM_DICT_EXTRA_KEYS = []</span><br><span class="line"></span><br><span class="line"><span class="meta">    @_renamed_kwarg('user', 'user_id')</span></span><br><span class="line"><span class="meta">    @_renamed_kwarg('tenant', 'project_id')</span></span><br><span class="line"><span class="meta">    @_renamed_kwarg('domain', 'domain_id')</span></span><br><span class="line"><span class="meta">    @_renamed_kwarg('user_domain', 'user_domain_id')</span></span><br><span class="line"><span class="meta">    @_renamed_kwarg('project_domain', 'project_domain_id')</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,</span></span></span><br><span class="line"><span class="function"><span class="params">                 auth_token=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 user_id=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 project_id=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 domain_id=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 user_domain_id=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 project_domain_id=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 is_admin=False,</span></span></span><br><span class="line"><span class="function"><span class="params">                 read_only=False,</span></span></span><br><span class="line"><span class="function"><span class="params">                 show_deleted=False,</span></span></span><br><span class="line"><span class="function"><span class="params">                 request_id=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 resource_uuid=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 overwrite=True,</span></span></span><br><span class="line"><span class="function"><span class="params">                 roles=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 user_name=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 project_name=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 domain_name=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 user_domain_name=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 project_domain_name=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 is_admin_project=True,</span></span></span><br><span class="line"><span class="function"><span class="params">                 service_token=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 service_user_id=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 service_user_name=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 service_user_domain_id=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 service_user_domain_name=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 service_project_id=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 service_project_name=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 service_project_domain_id=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 service_project_domain_name=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 service_roles=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 global_request_id=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 system_scope=None)</span>:</span></span><br><span class="line">        <span class="string">"""Initialize the RequestContext</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param overwrite: Set to False to ensure that the greenthread local</span></span><br><span class="line"><span class="string">                          copy of the index is not overwritten.</span></span><br><span class="line"><span class="string">        :param is_admin_project: Whether the specified project is specified in</span></span><br><span class="line"><span class="string">                                 the token as the admin project. Defaults to</span></span><br><span class="line"><span class="string">                                 True for backwards compatibility.</span></span><br><span class="line"><span class="string">        :type is_admin_project: bool</span></span><br><span class="line"><span class="string">        :param system_scope: The system scope of a token. The value ``all``</span></span><br><span class="line"><span class="string">                             represents the entire deployment system. A service</span></span><br><span class="line"><span class="string">                             ID represents a specific service within the</span></span><br><span class="line"><span class="string">                             deployment system.</span></span><br><span class="line"><span class="string">        :type system_scope: string</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># setting to private variables to avoid triggering subclass properties</span></span><br><span class="line">        self._user_id = user_id</span><br><span class="line">        self._project_id = project_id</span><br><span class="line">        self._domain_id = domain_id</span><br><span class="line">        self._user_domain_id = user_domain_id</span><br><span class="line">        self._project_domain_id = project_domain_id</span><br><span class="line"></span><br><span class="line">        self.auth_token = auth_token</span><br><span class="line">        self.user_name = user_name</span><br><span class="line">        self.project_name = project_name</span><br><span class="line">        self.domain_name = domain_name</span><br><span class="line">        self.system_scope = system_scope</span><br><span class="line">        self.user_domain_name = user_domain_name</span><br><span class="line">        self.project_domain_name = project_domain_name</span><br><span class="line">        self.is_admin = is_admin</span><br><span class="line">        self.is_admin_project = is_admin_project</span><br><span class="line">        self.read_only = read_only</span><br><span class="line">        self.show_deleted = show_deleted</span><br><span class="line">        self.resource_uuid = resource_uuid</span><br><span class="line">        self.roles = roles <span class="keyword">or</span> []</span><br><span class="line"></span><br><span class="line">        self.service_token = service_token</span><br><span class="line">        self.service_user_id = service_user_id</span><br><span class="line">        self.service_user_name = service_user_name</span><br><span class="line">        self.service_user_domain_id = service_user_domain_id</span><br><span class="line">        self.service_user_domain_name = service_user_domain_name</span><br><span class="line">        self.service_project_id = service_project_id</span><br><span class="line">        self.service_project_name = service_project_name</span><br><span class="line">        self.service_project_domain_id = service_project_domain_id</span><br><span class="line">        self.service_project_domain_name = service_project_domain_name</span><br><span class="line">        self.service_roles = service_roles <span class="keyword">or</span> []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> request_id:</span><br><span class="line">            request_id = generate_request_id()</span><br><span class="line">        self.request_id = request_id</span><br><span class="line">        self.global_request_id = global_request_id</span><br><span class="line">        <span class="keyword">if</span> overwrite <span class="keyword">or</span> <span class="keyword">not</span> get_current():</span><br><span class="line">            self.update_store()</span><br></pre></td></tr></table></figure><p>先看官方文档给的一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> oslo_config <span class="keyword">import</span> cfg</span><br><span class="line"><span class="keyword">from</span> oslo_context <span class="keyword">import</span> context</span><br><span class="line"><span class="keyword">from</span> oslo_log <span class="keyword">import</span> log <span class="keyword">as</span> logging</span><br><span class="line"></span><br><span class="line">CONF = cfg.CONF</span><br><span class="line">DOMAIN = <span class="string">"demo"</span></span><br><span class="line"></span><br><span class="line">logging.register_options(CONF)</span><br><span class="line">logging.setup(CONF, DOMAIN)</span><br><span class="line"></span><br><span class="line">LOG = logging.getLogger(__name__)</span><br><span class="line"></span><br><span class="line">LOG.info(<span class="string">"Message without context"</span>)</span><br><span class="line">context.RequestContext()</span><br><span class="line">LOG.info(<span class="string">"Message with context"</span>)</span><br></pre></td></tr></table></figure><p>上面的代码打印结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2016-01-20 21:56:29.283 8428 INFO __main__ [-] Message without context</span><br><span class="line">2016-01-20 21:56:29.284 8428 INFO __main__ [req-929d23e9-f50e-46ae-a8a7-02bc8c3fd2c8 - - - - -] Message with context</span><br></pre></td></tr></table></figure><p>看到上面的打印，有些人可能会有疑问，代码中只创建了 context.RequestContext 对象，并未赋值给 LOG, LOG 是怎么获取 request_id 的，实际上，RequestContext 对象创建之后会保存在 threading.local() 中，所以当前线程的其它代码都可以读取到 RequestContext 的值。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在介绍源码之前，我们先谈谈什么是 context. 一开始不太理解什么是 context，其实它是一个统称，在不同的地方有不同的含义，所以不是很直白。context 翻译成中文是“上下文”的意思，说白了和文章的上下文是一个意思，通俗一点讲就是环境。例如用户信息，token 之类的。如果还是不明白，看看下面的例子。&lt;/p&gt;
    
    </summary>
    
    
      <category term="openstack" scheme="http://yoursite.com/tags/openstack/"/>
    
  </entry>
  
  <entry>
    <title>go string 连接性能测试</title>
    <link href="http://yoursite.com/2018/04/28/go-string/"/>
    <id>http://yoursite.com/2018/04/28/go-string/</id>
    <published>2018-04-28T04:33:48.000Z</published>
    <updated>2018-09-28T06:28:42.058Z</updated>
    
    <content type="html"><![CDATA[<p>我们常使用字符串拼接，当比较小时，使用哪种方式都差不多，但是当拼接数比较大时，不同的方法效率会相差很大。</p><a id="more"></a><p>go 提供了如下几种方式连接字符串:</p><ul><li>strings.Join</li><li>fmt.Sprintf</li><li>+=</li><li>strings.Builder (go 1.10 提供)</li></ul><p>我们先简单测试下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">    <span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sz <span class="keyword">int</span>  = <span class="number">100000</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// += 方式</span></span><br><span class="line">    t0 := time.Now()</span><br><span class="line">    <span class="keyword">var</span> s <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; sz; i ++ &#123;</span><br><span class="line">        s += <span class="string">"a"</span></span><br><span class="line">    &#125;</span><br><span class="line">    d0 := time.Since(t0)</span><br><span class="line">    fmt.Printf(<span class="string">"time of [+=]: %v\n"</span>, d0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// strings.Join 方式</span></span><br><span class="line">    t1 := time.Now()</span><br><span class="line">    <span class="keyword">var</span> s1 <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; sz; i++ &#123;</span><br><span class="line">        s1 = strings.Join([]<span class="keyword">string</span>&#123;s1, <span class="string">"a"</span>&#125;, <span class="string">""</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    d1 := time.Since(t1)</span><br><span class="line">    fmt.Printf(<span class="string">"time of Join: %v\n"</span>, d1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Sprintf</span></span><br><span class="line">    t2 := time.Now()</span><br><span class="line">    <span class="keyword">var</span> s2 <span class="keyword">string</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; sz; i++ &#123;</span><br><span class="line">        s2 = fmt.Sprintf(<span class="string">"%s%s"</span>, s2, <span class="string">"a"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    d2 :=  time.Since(t2)</span><br><span class="line">    fmt.Printf(<span class="string">"time of Sprintf: %v\n"</span>, d2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// string.Builder</span></span><br><span class="line">    t3 := time.Now()</span><br><span class="line">    <span class="keyword">var</span> b strings.Builder</span><br><span class="line">    <span class="keyword">for</span> i :=<span class="number">0</span>; i &lt; sz; i++ &#123;</span><br><span class="line">        b.WriteString(<span class="string">"a"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    d3 := time.Since(t3)</span><br><span class="line">    fmt.Printf(<span class="string">"time of Builder: %v\n"</span>, d3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">time of [+=]: 1.1500289s</span><br><span class="line">time of Join: 1.1507809s</span><br><span class="line">time of Sprintf: 1.5668042s</span><br><span class="line">time of Builder: 1.992ms</span><br></pre></td></tr></table></figure><p>可以看出 +=, strings.Join, fmt.Sprintf 效率相差不大，但是 strings.Builder 的效率却高了 1000倍。为什么 strings.Builder 如此变态，我们看下实现：</p><ul><li>strings.Join 底层是用 += 和 copy 实现的，所以效率和 += 差不多</li><li>strings.Builder 使用 []type 数组实现;</li></ul><h3 id="strings-Builder-实现"><a href="#strings-Builder-实现" class="headerlink" title="strings.Builder 实现"></a>strings.Builder 实现</h3><p>Builder 可以用最小的内存拷贝来构建字符串。先看下 Builder 的简单实现:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Builder <span class="keyword">struct</span> &#123;</span><br><span class="line">    addr *Builder <span class="comment">// of receiver, to detect copies by value</span></span><br><span class="line">    buf  []<span class="keyword">byte</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Builder)</span> <span class="title">copyCheck</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> b.addr == <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="comment">// This hack works around a failing of Go's escape analysis</span></span><br><span class="line">        <span class="comment">// that was causing b to escape and be heap allocated.</span></span><br><span class="line">        <span class="comment">// See issue 23382.</span></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> once issue 7921 is fixed, this should be reverted to</span></span><br><span class="line">        <span class="comment">// just "b.addr = b".</span></span><br><span class="line">        b.addr = (*Builder)(noescape(unsafe.Pointer(b)))</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> b.addr != b &#123;</span><br><span class="line">        <span class="built_in">panic</span>(<span class="string">"strings: illegal use of non-zero Builder copied by value"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *Builder)</span> <span class="title">WriteString</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">int</span>, error)</span></span> &#123;</span><br><span class="line">    b.copyCheck()</span><br><span class="line">    b.buf = <span class="built_in">append</span>(b.buf, s...)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(s), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出 Builder 底层是用 []byte 实现的，每次添加字符串时，都是直接向数组最后插入值完成的，减少了不必要的内存拷贝，所以效率比较搞。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们常使用字符串拼接，当比较小时，使用哪种方式都差不多，但是当拼接数比较大时，不同的方法效率会相差很大。&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="http://yoursite.com/categories/coding/"/>
    
    
      <category term="go" scheme="http://yoursite.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>nose 使用</title>
    <link href="http://yoursite.com/2018/04/28/nose/"/>
    <id>http://yoursite.com/2018/04/28/nose/</id>
    <published>2018-04-28T02:21:18.000Z</published>
    <updated>2018-09-28T06:28:42.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用nose进行单元测试"><a href="#使用nose进行单元测试" class="headerlink" title="使用nose进行单元测试"></a>使用nose进行单元测试</h1><p>nose 是一个很 nice 的 python 测试框架，使用起来非常方便。有些 openstack 项目也使用 nova 进行单元测试。</p><a id="more"></a><h2 id="nose安装"><a href="#nose安装" class="headerlink" title="nose安装"></a>nose安装</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install nose</span><br></pre></td></tr></table></figure><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>例如我们在multiply.py文件中有如下一段代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y</span><br></pre></td></tr></table></figure><p>为了测试上面的代码，我们添加test_multiply.py，编写如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiply <span class="keyword">import</span> multiply</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_number_3_4</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> multiply(<span class="number">3</span>, <span class="number">4</span>) == <span class="number">12</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_strings_a_3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">assert</span> multiply(<span class="string">'a'</span>, <span class="number">3</span>) == <span class="string">'aaa'</span></span><br></pre></td></tr></table></figure><p>运行<code>nosetests</code>,打印结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yl@lee:~/code/py/project$ nosetests</span><br><span class="line">..</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 2 tests in 0.001s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>如果要查看详细信息我们可以添加-v参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yl@lee:~/code/py/project$ nosetests -v</span><br><span class="line">multiply_test.test_number_3_4 ... ok</span><br><span class="line">multiply_test.test_strings_a_3 ... ok</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 2 tests in 0.001s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><p>nose会自动匹配test用例，匹配规则是：满足<code>(?:^|[b_.-])[Tt]est</code>的类，函数，目录，方法。</p><h2 id="nose-fixtures"><a href="#nose-fixtures" class="headerlink" title="nose fixtures"></a>nose fixtures</h2><p>在测试一组用例的时候，有些初始化或结束代码是通用的，我们可以把这部分代码提取出来，放到setup和teardown中。</p><ul><li>在module生效，使用setup_module/teardown_module</li><li>在class生效，使用setup_class/teardown_class，并添加<code>@classmethod</code>装饰器</li><li>function使用setup_function/teardown_function,并添加<code>@with_setup</code>装饰器</li></ul><p><strong>备注</strong></p><ul><li>setup_module(): 在文件中最早执行</li><li>teardown_module(): 在文件中最后执行</li><li>setup()在类所有方之前执行</li><li>teardown()在类所有方法之后执行</li><li>setup_class()在类每个方法开始时执行</li><li>teardown_class()在类每个方法最后执行</li></ul><p>具体例子如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nose <span class="keyword">import</span> with_setup <span class="comment"># optional</span></span><br><span class="line"><span class="keyword">from</span> unnecessary_math <span class="keyword">import</span> multiply</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_module</span><span class="params">(module)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">""</span>) <span class="comment"># this is to get a newline after the dots</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"setup_module before anything in this file"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">teardown_module</span><span class="params">(module)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"teardown_module after everything in this file"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_setup_function</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"my_setup_function"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_teardown_function</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">"my_teardown_function"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@with_setup(my_setup_function, my_teardown_function)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_numbers_3_4</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'test_numbers_3_4  &lt;============================ actual test code'</span></span><br><span class="line">    <span class="keyword">assert</span> multiply(<span class="number">3</span>,<span class="number">4</span>) == <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@with_setup(my_setup_function, my_teardown_function)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_strings_a_3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'test_strings_a_3  &lt;============================ actual test code'</span></span><br><span class="line">    <span class="keyword">assert</span> multiply(<span class="string">'a'</span>,<span class="number">3</span>) == <span class="string">'aaa'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestUM</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"TestUM:setup() before each test method"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"TestUM:teardown() after each test method"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup_class</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"setup_class() before any methods in this class"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown_class</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"teardown_class() after any methods in this class"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_numbers_5_6</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'test_numbers_5_6()  &lt;============================ actual test code'</span></span><br><span class="line">        <span class="keyword">assert</span> multiply(<span class="number">5</span>,<span class="number">6</span>) == <span class="number">30</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_strings_b_2</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'test_strings_b_2()  &lt;============================ actual test code'</span></span><br><span class="line">        <span class="keyword">assert</span> multiply(<span class="string">'b'</span>,<span class="number">2</span>) == <span class="string">'bb'</span></span><br></pre></td></tr></table></figure><p>默认情况下nose不会打印程序的输出，加上<code>-s</code>参数可以打印输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">yl@lee:~/code/py/project$ nosetests -v -s</span><br><span class="line"></span><br><span class="line">setup_module before anything in this file</span><br><span class="line">setup_class() before any methods in this class</span><br><span class="line">multiply_test.TestUM.test_numbers_5_6 ... TestUM:setup() before each test method</span><br><span class="line">test_numbers_5_6()  &lt;============================ actual test code</span><br><span class="line">TestUM:teardown() after each test method</span><br><span class="line">ok</span><br><span class="line">multiply_test.TestUM.test_strings_b_2 ... TestUM:setup() before each test method</span><br><span class="line">test_strings_b_2()  &lt;============================ actual test code</span><br><span class="line">TestUM:teardown() after each test method</span><br><span class="line">ok</span><br><span class="line">teardown_class() after any methods in this class</span><br><span class="line">multiply_test.test_numbers_3_4 ... my_setup_function</span><br><span class="line">test_numbers_3_4  &lt;============================ actual test code</span><br><span class="line">my_teardown_function</span><br><span class="line">ok</span><br><span class="line">multiply_test.test_strings_a_3 ... my_setup_function</span><br><span class="line">test_strings_a_3  &lt;============================ actual test code</span><br><span class="line">my_teardown_function</span><br><span class="line">ok</span><br><span class="line">teardown_module after everything in this file</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 4 tests in 0.002s</span><br><span class="line"></span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h2 id="使用nose-assert语句"><a href="#使用nose-assert语句" class="headerlink" title="使用nose assert语句"></a>使用nose assert语句</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> nose.tools <span class="keyword">import</span> assert_equals</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_numbers_3_4</span><span class="params">()</span>:</span></span><br><span class="line">    assert_equals(multiply(<span class="number">3</span>,<span class="number">4</span>), <span class="number">12</span>)</span><br></pre></td></tr></table></figure><p>常用assert语句如下：</p><ul><li>assert_almost_equal(first, second, places=7, msg=None)</li><li>assert_almost_equals</li><li>assert_not_almost_equal</li><li>assert_not_almost_equals</li><li>assert_equal(first, second, place=7, msg=None)</li><li>assert_equals</li><li>assert_false</li><li>assert_true</li><li>assert_not_equal</li><li>assert_not_equals</li><li>eq_</li><li>ok_</li></ul><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>有时候我们会在程序的某些地方抛异常，对于这种情况，需要使用@raises装饰器处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">()</span>:</span></span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> nose.tools <span class="keyword">import</span> raises</span><br><span class="line"><span class="meta">@raises(SystemExit)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_play_except</span><span class="params">()</span>:</span></span><br><span class="line">    play()</span><br></pre></td></tr></table></figure><h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><ul><li>nosetests -v： debug模式，看到具体执行情况，推荐使用；</li><li>nose会捕获标准输出，程序中的print不会打印到出来，使用nosetests -s可以打开output输出；</li><li>默认nosetests会执行所有的test case，如果想单独执行一个case，执行nosetests –tests后跟要测试的文件；</li><li>nosetests –pdb-failures:失败时，立马调试。这个选项很赞，可以看到失败时的及时环境；</li><li>nosetests –collect-only -v: 不运行程序，只是搜集并输出各个case的名称；</li><li>nosetests -x:一旦case失败，立即停止，不执行后续case;</li><li>nosetestx -failed:只执行上一轮失败的case;</li></ul><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><ul><li>module使用 ‘test_’开头</li><li>fucntion使用 ‘tets_’开头</li><li>class使用 ‘Test’开头</li><li>method使用’test_’开头</li><li>测试代码的package里有’init.py’</li></ul><h2 id="获取nose返回值"><a href="#获取nose返回值" class="headerlink" title="获取nose返回值"></a>获取nose返回值</h2><ul><li><p>shell<br>在shell下执行时，如果全部用例都通过，则返回0，有failed或error则返回1。</p></li><li><p>python<br>在python代码中调用nose.run()函数，如果全部用例都通过，返回True，有failed或error返回False。</p></li></ul><p>默认情况下，nose会屏蔽所有输出，如果要打开调试信息可以通过如下方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = nose.run(defaultTest=<span class="string">""</span>, argv=[<span class="string">''</span>, <span class="string">'--nocapture'</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用nose进行单元测试&quot;&gt;&lt;a href=&quot;#使用nose进行单元测试&quot; class=&quot;headerlink&quot; title=&quot;使用nose进行单元测试&quot;&gt;&lt;/a&gt;使用nose进行单元测试&lt;/h1&gt;&lt;p&gt;nose 是一个很 nice 的 python 测试框架，使用起来非常方便。有些 openstack 项目也使用 nova 进行单元测试。&lt;/p&gt;
    
    </summary>
    
      <category term="coding" scheme="http://yoursite.com/categories/coding/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 迭代器和生成器</title>
    <link href="http://yoursite.com/2018/04/23/iterator/"/>
    <id>http://yoursite.com/2018/04/23/iterator/</id>
    <published>2018-04-23T04:08:45.000Z</published>
    <updated>2018-09-28T06:28:42.059Z</updated>
    
    <content type="html"><![CDATA[<p>在 python 中我们常用 <strong>for in</strong> 来遍历 list, set, dict, str 等。<br><strong>for in</strong> 的本质就干了两件事：</p><ol><li>调用 __iter__() 获取迭代器;</li><li>调用 next() 直到 StopIteration 异常; (python3 中是 __next__())</li></ol><a id="more"></a><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>我们先了解几个概念：</p><ul><li>Iterable: 可迭代对象</li><li>Iterator: 迭代器</li></ul><p>我们先看看 Iterable 的实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line">help(Iterable)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iterable</span><span class="params">(__builtin__.object)</span></span></span><br><span class="line"><span class="class"> |  <span class="title">Methods</span> <span class="title">defined</span> <span class="title">here</span>:</span></span><br><span class="line"> |</span><br><span class="line"> |  __iter__(self)</span><br><span class="line"> |</span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Class methods defined here:</span><br><span class="line"> |</span><br><span class="line"> |  __subclasshook__(cls, C) <span class="keyword">from</span> abc.ABCMeta</span><br><span class="line"> |</span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Data descriptors defined here:</span><br><span class="line"> |</span><br><span class="line"> |  __dict__</span><br><span class="line"> |      dictionary <span class="keyword">for</span> instance variables (<span class="keyword">if</span> defined)</span><br><span class="line"> |</span><br><span class="line"> |  __weakref__</span><br><span class="line"> |      list of weak references to the object (<span class="keyword">if</span> defined)</span><br><span class="line"> |</span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Data <span class="keyword">and</span> other attributes defined here:</span><br><span class="line"> |</span><br><span class="line"> |  __abstractmethods__ = frozenset([<span class="string">'__iter__'</span>])</span><br><span class="line"> |</span><br><span class="line"> |  __metaclass__ = &lt;<span class="class"><span class="keyword">class</span> '<span class="title">abc</span>.<span class="title">ABCMeta</span>'&gt;</span></span><br><span class="line"><span class="class"> |      <span class="title">Metaclass</span> <span class="title">for</span> <span class="title">defining</span> <span class="title">Abstract</span> <span class="title">Base</span> <span class="title">Classes</span> <span class="params">(ABCs)</span>.</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |      <span class="title">Use</span> <span class="title">this</span> <span class="title">metaclass</span> <span class="title">to</span> <span class="title">create</span> <span class="title">an</span> <span class="title">ABC</span>.  <span class="title">An</span> <span class="title">ABC</span> <span class="title">can</span> <span class="title">be</span> <span class="title">subclassed</span></span></span><br><span class="line"> |      directly, and then acts as a mix-in class.  You can also register</span><br><span class="line"> |      unrelated concrete classes (even built-<span class="keyword">in</span> classes) <span class="keyword">and</span> unrelated</span><br><span class="line"> |      ABCs <span class="keyword">as</span> <span class="string">'virtual subclasses'</span> -- these <span class="keyword">and</span> their descendants will</span><br></pre></td></tr></table></figure></p><p>再看看 Iterator 的实现<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator</span><br><span class="line"></span><br><span class="line">help(Iterator)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Iterator</span><span class="params">(Iterable)</span></span></span><br><span class="line"><span class="class"> |  <span class="title">Method</span> <span class="title">resolution</span> <span class="title">order</span>:</span></span><br><span class="line"> |      Iterator</span><br><span class="line"> |      Iterable</span><br><span class="line"> |      __builtin__.object</span><br><span class="line"> |</span><br><span class="line"> |  Methods defined here:</span><br><span class="line"> |</span><br><span class="line"> |  __iter__(self)</span><br><span class="line"> |</span><br><span class="line"> |  next(self)</span><br><span class="line"> |      Return the next item <span class="keyword">from</span> the iterator. When exhausted, <span class="keyword">raise</span> StopIteration</span><br><span class="line"> |</span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Class methods defined here:</span><br><span class="line"> |</span><br><span class="line"> |  __subclasshook__(cls, C) <span class="keyword">from</span> abc.ABCMeta</span><br><span class="line"> |</span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Data <span class="keyword">and</span> other attributes defined here:</span><br><span class="line"> |</span><br><span class="line"> |  __abstractmethods__ = frozenset([<span class="string">'next'</span>])</span><br><span class="line"> |</span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Data descriptors inherited <span class="keyword">from</span> Iterable:</span><br><span class="line"> |</span><br><span class="line"> |  __dict__</span><br><span class="line"> |      dictionary <span class="keyword">for</span> instance variables (<span class="keyword">if</span> defined)</span><br><span class="line"> |</span><br><span class="line"> |  __weakref__</span><br><span class="line"> |      list of weak references to the object (<span class="keyword">if</span> defined)</span><br><span class="line"> |</span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Data <span class="keyword">and</span> other attributes inherited <span class="keyword">from</span> Iterable:</span><br><span class="line"> |</span><br><span class="line"> |  __metaclass__ = &lt;<span class="class"><span class="keyword">class</span> '<span class="title">abc</span>.<span class="title">ABCMeta</span>'&gt;</span></span><br><span class="line"><span class="class"> |      <span class="title">Metaclass</span> <span class="title">for</span> <span class="title">defining</span> <span class="title">Abstract</span> <span class="title">Base</span> <span class="title">Classes</span> <span class="params">(ABCs)</span>.</span></span><br><span class="line"><span class="class"> |</span></span><br><span class="line"><span class="class"> |      <span class="title">Use</span> <span class="title">this</span> <span class="title">metaclass</span> <span class="title">to</span> <span class="title">create</span> <span class="title">an</span> <span class="title">ABC</span>.  <span class="title">An</span> <span class="title">ABC</span> <span class="title">can</span> <span class="title">be</span> <span class="title">subclassed</span></span></span><br><span class="line"> |      directly, and then acts as a mix-in class.  You can also register</span><br><span class="line"> |      unrelated concrete classes (even built-<span class="keyword">in</span> classes) <span class="keyword">and</span> unrelated</span><br><span class="line"> |      ABCs <span class="keyword">as</span> <span class="string">'virtual subclasses'</span> -- these <span class="keyword">and</span> their descendants will</span><br><span class="line"> |      be considered subclasses of the registering ABC by the built-<span class="keyword">in</span></span><br><span class="line"> |      issubclass() function, but the registering ABC won<span class="string">'t show up in</span></span><br><span class="line"><span class="string"> |      their MRO (Method Resolution Order) nor will method</span></span><br><span class="line"><span class="string"> |      implementations defined by the registering ABC be callable (not</span></span><br><span class="line"><span class="string"> |      even via super()).</span></span><br></pre></td></tr></table></figure></p><p>从继承关系来看，所有的 Iterator(迭代器)都是 Iterable(可迭代对象)，<br>从实现角度看 Iterator 新增了 next() 方法。</p><h3 id="判断是-Iterator-还是-Iterable"><a href="#判断是-Iterator-还是-Iterable" class="headerlink" title="判断是 Iterator 还是 Iterable"></a>判断是 Iterator 还是 Iterable</h3><ul><li>凡是可以 for 循环的，都是 Iterable;</li><li>凡是可以 next() 的，都是 Iterator;</li><li>list, tuple, dict, str, set 都不是 Iterator，但是可以通过 __iter__() 返回一个 Iterator 对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Iterator, Iterable</span><br><span class="line"></span><br><span class="line">isinstance([<span class="number">1</span>,], Iterator)    // <span class="keyword">False</span></span><br><span class="line">isinstance((<span class="number">1</span>,), Iterator)    // <span class="keyword">False</span></span><br><span class="line">isinstance(&#123;&#125;, Iterator)      // <span class="keyword">False</span></span><br><span class="line">isinstance(<span class="string">"abc"</span>, Iterator)   // <span class="keyword">False</span></span><br><span class="line">isinstance(set([]), Iterator) // <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">isinstance([<span class="number">1</span>,], Iterable)    // <span class="keyword">True</span></span><br><span class="line">isinstance((<span class="number">1</span>,), Iterable)    // <span class="keyword">True</span></span><br><span class="line">isinstance(&#123;&#125;, Iterable)      // <span class="keyword">True</span></span><br><span class="line">isinstance(<span class="string">"abc"</span>, Iterable)   // <span class="keyword">True</span></span><br><span class="line">isinstance(set([]), Iterable) // <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">dir([])                       // 没有 next() 方法</span><br><span class="line">dir([].__iter__())            // 有 next() 方法</span><br></pre></td></tr></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>讲完了迭代器，我们再说说生成器，这里引用廖雪峰博客里的介绍:</p><p>通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。<br>而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，<br>如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。</p><p>所以，如果列表元素可以按照某种算法推算出来，那我们是否可以在循环的过程中不断推算出后续的元素呢？<br>这样就不必创建完整的list，从而节省大量的空间。在Python中，这种一边循环一边计算的机制，<br>称为生成器（Generator）。</p><p>生成器的创建很简单，可以通过推导列表创建：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g = (x * x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>))  // 使用 [] 返回的是 list, () 返回的是 generator</span><br></pre></td></tr></table></figure><p>还有一种方式是通过 <strong>yield</strong> 关键字生成。</p><p>先看看生成器的实现:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;genexpr&gt; = <span class="class"><span class="keyword">class</span> <span class="title">generator</span><span class="params">(object)</span></span></span><br><span class="line"><span class="class"> |  <span class="title">Methods</span> <span class="title">defined</span> <span class="title">here</span>:</span></span><br><span class="line"> |</span><br><span class="line"> |  __getattribute__(...)</span><br><span class="line"> |      x.__getattribute__('name') &lt;==&gt; x.name</span><br><span class="line"> |</span><br><span class="line"> |  __iter__(...)</span><br><span class="line"> |      x.__iter__() &lt;==&gt; iter(x)</span><br><span class="line"> |</span><br><span class="line"> |  __repr__(...)</span><br><span class="line"> |      x.__repr__() &lt;==&gt; repr(x)</span><br><span class="line"> |</span><br><span class="line"> |  close(...)</span><br><span class="line"> |      close() -&gt; raise GeneratorExit inside generator.</span><br><span class="line"> |</span><br><span class="line"> |  next(...)</span><br><span class="line"> |      x.next() -&gt; the next value, or raise StopIteration</span><br><span class="line"> |</span><br><span class="line"> |  send(...)</span><br><span class="line"> |      send(arg) -&gt; send 'arg' into generator,</span><br><span class="line"> |      <span class="keyword">return</span> next yielded value <span class="keyword">or</span> <span class="keyword">raise</span> StopIteration.</span><br><span class="line"> |</span><br><span class="line"> |  throw(...)</span><br><span class="line"> |      throw(typ[,val[,tb]]) -&gt; raise exception in generator,</span><br><span class="line"> |      <span class="keyword">return</span> next yielded value <span class="keyword">or</span> <span class="keyword">raise</span> StopIteration.</span><br><span class="line"> |</span><br><span class="line"> |  ----------------------------------------------------------------------</span><br><span class="line"> |  Data descriptors defined here:</span><br><span class="line"> |</span><br><span class="line"> |  gi_code</span><br><span class="line"> |</span><br><span class="line"> |  gi_frame</span><br><span class="line"> |</span><br><span class="line"> |  gi_running</span><br></pre></td></tr></table></figure><p>可以发现生成器较迭代器多了 <strong>send</strong>, <strong>throw</strong> 等方法。</p><h3 id="send"><a href="#send" class="headerlink" title="send"></a>send</h3><p>这里重点介绍下 <strong>send</strong> 方法，我们知道在使用迭代器时，遇到 <strong>yield</strong> 关键字<br>会退出来，下一迭代时会继续执行。先看个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MyGenerator</span><span class="params">()</span>:</span></span><br><span class="line">    value = <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    value = <span class="keyword">yield</span> value</span><br><span class="line"></span><br><span class="line">gen = MyGenerator()</span><br><span class="line"><span class="keyword">print</span> gen.next()         // <span class="keyword">print</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> gen.next()         // <span class="keyword">print</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure><p>我们看看具体执行过程：</p><ul><li>调用 next() 方法，走到 <strong>yield 1</strong> 退出，注意这个时候还没有走到 value 的 赋值操作(即: value = yield 1 只执行了右侧部分)</li><li>调用 next() 方法，继续上次的代码执行(即：value = yield 1 只执行了右侧的赋值部分)</li><li>由于 yield 并没有返回值，所以 value = None</li><li>返回 None, 并打印</li></ul><p>修改下上面的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MyGenerator</span><span class="params">()</span>:</span></span><br><span class="line">    value = <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    value = <span class="keyword">yield</span> value</span><br><span class="line"></span><br><span class="line">gen = MyGenerator()</span><br><span class="line"><span class="keyword">print</span> gen.next()         // <span class="keyword">print</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> gen.send(<span class="number">2</span>)        // <span class="keyword">print</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>send 方法是指定的是上一次被挂起的yield语句的返回值，这么说有点抽象，我们看执行过程：</p><ul><li>调用 next() 方法，走到 <strong>yield 1</strong> 退出，注意这个时候还没有走到 value 的 赋值操作(即: value = yield 1 只执行了右侧部分)</li><li>调用 send(2) 方法，继续上次的代码执行(即：value = yield 1 只执行了右侧的赋值部分)</li><li>value 使用 send 传的值，即： value = 2</li><li>返回 2, 并打印</li></ul><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>协程就是利用 <strong>yield</strong> 和生成器的 <strong>send()</strong> 方法实现的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 python 中我们常用 &lt;strong&gt;for in&lt;/strong&gt; 来遍历 list, set, dict, str 等。&lt;br&gt;&lt;strong&gt;for in&lt;/strong&gt; 的本质就干了两件事：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用 __iter__() 获取迭代器;&lt;/li&gt;
&lt;li&gt;调用 next() 直到 StopIteration 异常; (python3 中是 __next__())&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="coding" scheme="http://yoursite.com/categories/coding/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>shell 常用技巧</title>
    <link href="http://yoursite.com/2018/04/22/shell/"/>
    <id>http://yoursite.com/2018/04/22/shell/</id>
    <published>2018-04-22T03:10:11.000Z</published>
    <updated>2018-11-22T03:12:10.564Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="输出颜色控制"><a href="#输出颜色控制" class="headerlink" title="输出颜色控制"></a>输出颜色控制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RED=&apos;\033[0;31m&apos;</span><br><span class="line">NC=&apos;\033[0m&apos;</span><br><span class="line">echo &quot;$&#123;RED&#125;hello world!$&#123;NC&#125;&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;输出颜色控制&quot;&gt;&lt;a href=&quot;#输出颜色控制&quot; class=&quot;headerlink&quot; title=&quot;输出颜色控制&quot;&gt;&lt;/a&gt;输出颜色控制&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;
      
    
    </summary>
    
      <category term="shell" scheme="http://yoursite.com/categories/shell/"/>
    
    
      <category term="shell" scheme="http://yoursite.com/tags/shell/"/>
    
  </entry>
  
</feed>
